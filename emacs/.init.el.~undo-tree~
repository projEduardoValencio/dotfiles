(undo-tree-save-format-version . 1)
"4612b451ee6439d03a2c3f0a61caf7cc3b694027"
[nil nil nil nil (25803 5656 946625 299000) 0 nil]
([nil nil ((#("
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-names-vector
   [\"#212121\" \"#f57373\" \"#c3e88d\" \"#ffcb6b\" \"#82aaff\" \"#c792ea\" \"#89DDFF\" \"#EEFFFF\"])
 '(custom-safe-themes
   '(\"ce4234c32262924c1d2f43e6b61312634938777071f1129c7cde3ebd4a3028da\" \"da75eceab6bea9298e04ce5b4b07349f8c02da305734f7c0c8c6af7b5eaa9738\" \"1aa4243143f6c9f2a51ff173221f4fd23a1719f4194df6cef8878e75d349613d\" default))
 '(exwm-floating-border-color \"#303030\")
 '(fci-rule-color \"#585858\")
 '(highlight-tail-colors (((\"#31342b\") . 0) ((\"#2b3337\") . 20)))
 '(ispell-dictionary nil)
 '(jdee-db-active-breakpoint-face-colors (cons \"#171F24\" \"#c792ea\"))
 '(jdee-db-requested-breakpoint-face-colors (cons \"#171F24\" \"#c3e88d\"))
 '(jdee-db-spec-breakpoint-face-colors (cons \"#171F24\" \"#585858\"))
 '(objed-cursor-color \"#f57373\")
 '(package-selected-packages
   '(rainbow-delimiters counsel ivy org-bullets cmake-mode yasnippet-snippets which-key use-package-chords quickrun projectile neotree lsp-ui lsp-java helm-swoop helm-lsp helm-descbinds general flycheck exec-path-from-shell evil-collection doom-themes company centaur-tabs auto-complete all-the-icons))
 '(pdf-view-midnight-colors (cons \"#EEFFFF\" \"#212121\"))
 '(rustic-ansi-faces
   [\"#212121\" \"#f57373\" \"#c3e88d\" \"#ffcb6b\" \"#82aaff\" \"#c792ea\" \"#89DDFF\" \"#EEFFFF\"])
 '(vc-annotate-background \"#212121\")
 '(vc-annotate-color-map
   (list
    (cons 20 \"#c3e88d\")
    (cons 40 \"#d7de81\")
    (cons 60 \"#ebd476\")
    (cons 80 \"#ffcb6b\")
    (cons 100 \"#fcb66b\")
    (cons 120 \"#f9a16b\")
    (cons 140 \"#F78C6C\")
    (cons 160 \"#e78e96\")
    (cons 180 \"#d690c0\")
    (cons 200 \"#c792ea\")
    (cons 220 \"#d687c2\")
    (cons 240 \"#e57d9a\")
    (cons 260 \"#f57373\")
    (cons 280 \"#cd6c6c\")
    (cons 300 \"#a66565\")
    (cons 320 \"#7f5e5e\")
    (cons 340 \"#585858\")
    (cons 360 \"#585858\")))
 '(vc-annotate-very-old-color nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 " 0 24 (fontified t) 24 27 (fontified t face font-lock-comment-delimiter-face) 27 69 (fontified t face font-lock-comment-face) 69 70 (fontified t) 70 73 (fontified t face font-lock-comment-delimiter-face) 73 134 (fontified t face font-lock-comment-face) 134 135 (fontified t) 135 138 (fontified t face font-lock-comment-delimiter-face) 138 192 (fontified t face font-lock-comment-face) 192 193 (fontified t) 193 196 (fontified t face font-lock-comment-delimiter-face) 196 246 (fontified t face font-lock-comment-face) 246 277 (fontified t) 277 286 (fontified t face font-lock-string-face) 286 287 (fontified t) 287 296 (fontified t face font-lock-string-face) 296 297 (fontified t) 297 306 (fontified t face font-lock-string-face) 306 307 (fontified t) 307 316 (fontified t face font-lock-string-face) 316 317 (fontified t) 317 326 (fontified t face font-lock-string-face) 326 327 (fontified t) 327 336 (fontified t face font-lock-string-face) 336 337 (fontified t) 337 346 (fontified t face font-lock-string-face) 346 347 (fontified t) 347 356 (fontified t face font-lock-string-face) 356 386 (fontified t) 386 452 (fontified t face font-lock-string-face) 452 453 (fontified t) 453 500 (fontified t face font-lock-string-face) 500 519 (fontified t face font-lock-string-face) 519 520 (fontified t) 520 586 (fontified t face font-lock-string-face) 586 597 (fontified t) 597 627 (fontified t) 627 636 (fontified t face font-lock-string-face) 636 656 (fontified t) 656 665 (fontified t face font-lock-string-face) 665 695 (fontified t) 695 704 (fontified t face font-lock-string-face) 704 713 (fontified t) 713 722 (fontified t face font-lock-string-face) 722 805 (fontified t) 805 814 (fontified t face font-lock-string-face) 814 815 (fontified t) 815 824 (fontified t face font-lock-string-face) 824 877 (fontified t) 877 886 (fontified t face font-lock-string-face) 886 887 (fontified t) 887 896 (fontified t face font-lock-string-face) 896 944 (fontified t) 944 953 (fontified t face font-lock-string-face) 953 954 (fontified t) 954 963 (fontified t face font-lock-string-face) 963 988 (fontified t) 988 997 (fontified t face font-lock-string-face) 997 1097 (fontified t) 1097 1331 (fontified t) 1331 1365 (fontified t) 1365 1374 (fontified t face font-lock-string-face) 1374 1375 (fontified t) 1375 1384 (fontified t face font-lock-string-face) 1384 1412 (fontified t) 1412 1421 (fontified t face font-lock-string-face) 1421 1422 (fontified t) 1422 1431 (fontified t face font-lock-string-face) 1431 1432 (fontified t) 1432 1441 (fontified t face font-lock-string-face) 1441 1442 (fontified t) 1442 1451 (fontified t face font-lock-string-face) 1451 1452 (fontified t) 1452 1461 (fontified t face font-lock-string-face) 1461 1462 (fontified t) 1462 1471 (fontified t face font-lock-string-face) 1471 1472 (fontified t) 1472 1481 (fontified t face font-lock-string-face) 1481 1482 (fontified t) 1482 1491 (fontified t face font-lock-string-face) 1491 1520 (fontified t) 1520 1529 (fontified t face font-lock-string-face) 1529 1578 (fontified t) 1578 1587 (fontified t face font-lock-string-face) 1587 1589 (fontified t) 1589 1602 (fontified t) 1602 1611 (fontified t face font-lock-string-face) 1611 1626 (fontified t) 1626 1635 (fontified t face font-lock-string-face) 1635 1650 (fontified t) 1650 1659 (fontified t face font-lock-string-face) 1659 1675 (fontified t) 1675 1684 (fontified t face font-lock-string-face) 1684 1700 (fontified t) 1700 1709 (fontified t face font-lock-string-face) 1709 1725 (fontified t) 1725 1734 (fontified t face font-lock-string-face) 1734 1750 (fontified t) 1750 1759 (fontified t face font-lock-string-face) 1759 1775 (fontified t) 1775 1784 (fontified t face font-lock-string-face) 1784 1800 (fontified t) 1800 1809 (fontified t face font-lock-string-face) 1809 1825 (fontified t) 1825 1834 (fontified t face font-lock-string-face) 1834 1850 (fontified t) 1850 1859 (fontified t face font-lock-string-face) 1859 1875 (fontified t) 1875 1884 (fontified t face font-lock-string-face) 1884 1900 (fontified t) 1900 1909 (fontified t face font-lock-string-face) 1909 1925 (fontified t) 1925 1934 (fontified t face font-lock-string-face) 1934 1950 (fontified t) 1950 1959 (fontified t face font-lock-string-face) 1959 1975 (fontified t) 1975 1984 (fontified t face font-lock-string-face) 1984 2000 (fontified t) 2000 2009 (fontified t face font-lock-string-face) 2009 2068 (fontified t) 2068 2071 (fontified t face font-lock-comment-delimiter-face) 2071 2089 (fontified t face font-lock-comment-face) 2089 2109 (fontified t face font-lock-comment-face) 2109 2110 (fontified t) 2110 2113 (fontified t face font-lock-comment-delimiter-face) 2113 2174 (fontified t face font-lock-comment-face) 2174 2175 (fontified t) 2175 2178 (fontified t face font-lock-comment-delimiter-face) 2178 2232 (fontified t face font-lock-comment-face) 2232 2233 (fontified t) 2233 2236 (fontified t face font-lock-comment-delimiter-face) 2236 2286 (fontified t face font-lock-comment-face) 2286 2287 (fontified t)) . 6840) (undo-tree-id3 . -2286) (undo-tree-id4 . -2286) (undo-tree-id5 . -2287) (undo-tree-id6 . -2286) (undo-tree-id7 . -2286) (undo-tree-id8 . -2286) (undo-tree-id9 . -2286) (undo-tree-id10 . -2287) (undo-tree-id11 . -2286) (t 25803 5560 57934 891000)) nil (25803 5668 102117 189000) 0 nil])
([nil nil ((#(")
" 0 2 (fontified t)) . 6840) (undo-tree-id0 . 2) (undo-tree-id1 . -1) (undo-tree-id2 . -2)) nil (25803 5668 102107 800000) 0 nil])
([nil nil ((apply 60 6841 7748 undo--wrap-and-run-primitive-undo 6841 7748 ((#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7710) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7679) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7674) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7619) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7569) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7533) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7480) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7457) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7393) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7334) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7316) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7283) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7246) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7190) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7170) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7122) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7063) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -6952) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -6892) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -6841) 7808)) (t 25803 5668 105929 543000)) nil (25803 5684 917573 484000) 0 nil])
([nil nil ((apply -6 7749 7820 undo--wrap-and-run-primitive-undo 7749 7820 ((7792 . 7795) (7749 . 7752) 7814))) nil (25803 5684 917568 978000) 0 nil])
([nil nil ((apply -3 20 55 undo--wrap-and-run-primitive-undo 20 55 ((20 . 23))) (t 25803 5684 917928 711000)) nil (25803 5754 617662 327000) 0 nil])
([nil nil ((apply -60 6844 7811 undo--wrap-and-run-primitive-undo 6844 7811 ((7770 . 7773) (7736 . 7739) (7728 . 7731) (7670 . 7673) (7617 . 7620) (7578 . 7581) (7522 . 7525) (7496 . 7499) (7429 . 7432) (7367 . 7370) (7346 . 7349) (7310 . 7313) (7270 . 7273) (7211 . 7214) (7188 . 7191) (7137 . 7140) (7075 . 7078) (6961 . 6964) (6898 . 6901) (6844 . 6847) 7751)) (t 25803 5754 617925 261000)) nil (25803 5795 306439 890000) 0 nil])
([nil nil ((apply 6 7812 7877 undo--wrap-and-run-primitive-undo 7812 7877 ((#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7852) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7812) 7883))) nil (25803 5795 306435 980000) 0 nil])
([nil nil ((apply -6 7812 7883 undo--wrap-and-run-primitive-undo 7812 7883 ((7855 . 7858) (7812 . 7815))) (t 25803 5795 305923 247000)) nil (25803 5821 8181 526000) 0 nil])
([nil nil ((apply 60 6844 7751 undo--wrap-and-run-primitive-undo 6844 7751 ((#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7713) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7682) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7677) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7622) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7572) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7536) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7483) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7460) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7396) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7337) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7319) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7286) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7249) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7193) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7173) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7125) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -7066) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -6955) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -6895) (#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -6844)))) nil (25803 5821 8177 594000) 0 nil])
([nil nil ((7239 . 7241) (#("A" 0 1 (fontified t face font-lock-string-face)) . 7239) (t 25803 5821 9921 975000)) nil (25803 6055 638556 231000) 0 nil])
([nil nil ((apply -60 6844 7812 undo--wrap-and-run-primitive-undo 6844 7812 ((7771 . 7774) (7737 . 7740) (7729 . 7732) (7671 . 7674) (7618 . 7621) (7579 . 7582) (7523 . 7526) (7497 . 7500) (7430 . 7433) (7368 . 7371) (7347 . 7350) (7311 . 7314) (7271 . 7274) (7211 . 7214) (7188 . 7191) (7137 . 7140) (7075 . 7078) (6961 . 6964) (6898 . 6901) (6844 . 6847) 7752))) nil (25803 6055 638554 904000) 0 nil])
([nil nil ((6871 . 6882) (6870 . 6871) (6849 . 6870) (#("initial-bu" 0 10 (fontified t)) . -6849) (undo-tree-id12 . -10) 6859 (6846 . 6859) (#("q" 0 1 (fontified t)) . -6846) (undo-tree-id13 . -1) 6847 (6844 . 6847) (6843 . 6845) (6842 . 6843) 6842) nil (25803 6055 638551 332000) 0 nil])
([nil nil ((6882 . 6884) (t 25803 6055 637910 363000)) nil (25803 6088 596815 806000) 0 nil])
([nil nil ((6883 . 6884)) nil (25803 6088 596814 480000) 0 nil])
([nil nil ((6883 . 6884) (#("1" 0 1 (fontified t)) . -6883) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) 6884) nil (25803 6088 596810 953000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -6882) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) 6883 (#("'a" 0 2 (fontified t)) . 6883) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . 1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) 6884 (t 25803 6088 597908 731000)) nil (25803 6124 206671 5000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -6871) (undo-tree-id24 . -1) 6872 (6871 . 6872)) nil (25803 6124 206661 316000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -6880) (6880 . 6881) (#(")" 0 1 (fontified nil)) . -6880) (6880 . 6881) (6878 . 6881) (6872 . 6878) (6870 . 6873)) nil (25803 6124 206659 591000) 0 nil])
([nil nil ((6881 . 6882)) nil (25803 6124 206658 165000) 0 nil])
([nil nil ((#("'org-agenda" 0 11 (fontified t)) . 6884) (undo-tree-id18 . -10) (undo-tree-id19 . -10) (undo-tree-id20 . -10) (undo-tree-id21 . -11) (undo-tree-id22 . -10) (undo-tree-id23 . -10) 6894) nil (25803 6124 206657 32000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -6883) (6883 . 6884) (#(")" 0 1 (fontified nil)) . -6883) (6883 . 6884) (6882 . 6884)) nil (25803 6124 206645 638000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6893 . 6894) (nil fontified nil 6883 . 6894) (6883 . 6894) 6882) nil (25803 6124 206640 910000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 6896) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (t 25803 6124 205906 969000)) nil (25803 6125 860810 974000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 6895) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (t 25803 6125 861906 887000)) nil (25803 6143 775308 152000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 6894) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1)) nil (25803 6143 775281 265000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . -6871) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) 6872 (#("lambda () " 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 8 (fontified t) 8 10 (fontified t)) . -6872) (undo-tree-id49 . -10) (undo-tree-id50 . -10) (undo-tree-id51 . -10) (undo-tree-id52 . -10) 6882) nil (25803 6143 775183 668000) 0 nil])
([nil nil ((6884 . 6885) (#(")" 0 1 (fontified nil)) . -6884) (6884 . 6885) (t 25803 6143 773906 1000)) nil (25803 6145 435391 837000) 0 nil])
([nil nil ((4901 . 4907) (#("init" 0 4 (fontified t face font-lock-builtin-face)) . 4901) (undo-tree-id146 . -3) (undo-tree-id147 . -2) (undo-tree-id148 . -2) (undo-tree-id149 . -2) (undo-tree-id150 . -2) (undo-tree-id151 . -4) (undo-tree-id152 . -4) 4903 (t 25803 6145 433905 918000)) nil (25803 6171 375057 330000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 6885) (undo-tree-id155 . 1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (t 25803 6171 373904 635000)) nil (25803 6217 571466 557000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . 6873) (undo-tree-id153 . -1) (undo-tree-id154 . -1)) nil (25803 6217 571457 919000) 0 nil])
([nil nil ((apply -3 6845 6888 undo--wrap-and-run-primitive-undo 6845 6888 ((6845 . 6848) 6884)) (t 25803 6217 569902 348000)) nil (25803 6324 683046 177000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -6919) (6919 . 6920) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -6919) (6919 . 6920) (6917 . 6920) (6899 . 6917) (#("emacs-start" 0 11 (fontified t)) . -6899) (undo-tree-id164 . -11) (undo-tree-id165 . 11) (undo-tree-id166 . -11) 6910 (6899 . 6910) (6898 . 6899) (6890 . 6898) (#("add-h" 0 5 (fontified t)) . -6890) (undo-tree-id167 . -5) 6895 (6890 . 6895) (6889 . 6891) (6888 . 6889) 6845) nil (25803 6324 683044 310000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -6930) (6930 . 6931) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -6930) (6930 . 6931) (6928 . 6931) (#(")" 0 1 (fontified nil)) . -6927) (6927 . 6928) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -6927) (6927 . 6928) (6925 . 6928) (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -6925) (undo-tree-id163 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 6926) (6919 . 6927)) nil (25803 6324 683038 20000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -6931) (6931 . 6932) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -6931) (6931 . 6932) (6930 . 6932)) nil (25803 6324 683034 191000) 0 nil])
([nil nil ((6930 . 6940) (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -6930) (undo-tree-id162 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . 6931)) nil (25803 6324 683030 414000) 0 nil])
([nil nil ((6940 . 6942) (t 25803 6324 685897 47000)) nil (25803 6328 858920 703000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -6940) (undo-tree-id168 . -1) (undo-tree-id169 . -1) 6941 (6940 . 6941) (#(" a" 0 2 (fontified t)) . 6940) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -2) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -2) (undo-tree-id203 . -2) (undo-tree-id204 . -2) (t 25803 6328 857896 840000)) nil (25803 6353 377067 703000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 6929) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (t 25803 6353 377895 627000)) nil (25803 6375 98630 319000) 0 nil])
([nil nil ((6929 . 6930)) nil (25803 6375 98627 225000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t face font-lock-builtin-face)) . -6931) (undo-tree-id205 . -1) (undo-tree-id206 . 1) (undo-tree-id207 . -1) (#("w" 0 1 (fontified t face font-lock-builtin-face)) . -6932) (undo-tree-id208 . -1) (undo-tree-id209 . -1) 6933 (6930 . 6933)) nil (25803 6375 98623 277000) 0 nil])
([nil nil ((6930 . 6936) (#("'" 0 1 (fontified t)) . 6930) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (t 25803 6375 97894 552000)) nil (25803 6382 745012 927000) 0 nil])
([nil nil ((6899 . 6900) (t 25803 6382 745894 173000)) nil (25803 6424 410042 432000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -6931) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (#("r" 0 1 (fontified t)) . -6932) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (#("o" 0 1 (fontified t)) . -6933) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (#("g" 0 1 (fontified t)) . -6934) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (#("n" 0 1 (fontified t)) . -6935) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (#(" " 0 1 (fontified t)) . -6936) (undo-tree-id236 . -1) 6937 (t 25803 6424 409892 111000)) nil (25803 6457 51219 346000) 0 nil])
([nil nil ((6931 . 6933) (t 25803 6457 53890 495000)) nil (25803 6464 949550 66000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . 6932) (undo-tree-id237 . -1) (undo-tree-id238 . -1)) nil (25803 6464 949548 616000) 0 nil])
([nil nil ((6943 . 6944) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face))) . -6943) (6943 . 6944)) nil (25803 6464 949537 234000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -6943) (undo-tree-id239 . -1) 6944 (6942 . 6944) (t 25803 6464 949890 104000)) nil (25803 6483 110389 515000) 0 nil])
([nil nil ((6943 . 6945)) nil (25803 6483 110377 456000) 0 nil])
([nil nil ((6958 . 6962) (#("n" 0 1 (fontified t)) . -6958) (undo-tree-id274 . -1) (#("e" 0 1 (fontified t)) . -6959) (undo-tree-id275 . -1) 6960 (6956 . 6960) (#("g" 0 1 (fontified t)) . -6956) (undo-tree-id276 . -1) (#("a" 0 1 (fontified t)) . -6957) (undo-tree-id277 . -1) (#("n" 0 1 (fontified t)) . -6958) (undo-tree-id278 . -1) 6959 (6955 . 6959) (#("0" 0 1 (fontified t)) . -6955) (undo-tree-id279 . -1) 6956 (6952 . 6956) (6951 . 6953) (6950 . 6951) (6949 . 6950) (t 25803 6483 109889 206000) 6944) nil (25803 6543 135393 318000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -6950) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (#("l" 0 1 (fontified t)) . -6951) (undo-tree-id272 . -1) (undo-tree-id273 . -1) 6952 (6951 . 6952) (6950 . 6951) 6950) nil (25803 6543 135386 796000) 0 nil])
([nil nil ((6964 . 6969) (#("s" 0 1 (fontified t)) . -6964) (undo-tree-id255 . -1) (#("e" 0 1 (fontified t)) . -6965) (undo-tree-id256 . -1) (#("r" 0 1 (fontified t)) . -6966) (undo-tree-id257 . -1) 6967 (6964 . 6967) (#("n" 0 1 (fontified t)) . -6964) (undo-tree-id258 . -1) (#("p" 0 1 (fontified t)) . -6965) (undo-tree-id259 . -1) (#("u" 0 1 (fontified t)) . -6966) (undo-tree-id260 . -1) (#("t" 0 1 (fontified t)) . -6967) (undo-tree-id261 . -1) 6968 (6963 . 6968) (#("i" 0 1 (fontified t)) . -6963) (undo-tree-id262 . -1) (#("m" 0 1 (fontified t)) . -6964) (undo-tree-id263 . -1) (#("p" 0 1 (fontified t)) . -6965) (undo-tree-id264 . -1) (#("u" 0 1 (fontified t)) . -6966) (undo-tree-id265 . -1) (#("t" 0 1 (fontified t)) . -6967) (undo-tree-id266 . -1) 6968 (6962 . 6968)) nil (25803 6543 135379 704000) 0 nil])
([nil nil ((6969 . 6976)) nil (25803 6543 135370 326000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -6964) (6964 . 6965) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -6964) (6964 . 6965) (6963 . 6965) (#("inset insert " 0 13 (fontified t)) . 6963) (undo-tree-id240 . -12) (undo-tree-id241 . -12) (undo-tree-id242 . -12) (undo-tree-id243 . -5) (undo-tree-id244 . -12) (undo-tree-id245 . -12) (undo-tree-id246 . -12) (undo-tree-id247 . -12) (undo-tree-id248 . -13) (undo-tree-id249 . -12) (undo-tree-id250 . -12) (undo-tree-id251 . -12) (undo-tree-id252 . -13) (undo-tree-id253 . -13) (undo-tree-id254 . -13)) nil (25803 6543 135368 193000) 0 nil])
([nil nil ((6972 . 6973) (6971 . 6973) (#("\"" 0 1 (fontified nil)) . -6971) (6964 . 6972)) nil (25803 6543 135348 893000) 0 nil])
([nil nil ((6972 . 6973) (t 25803 6543 137886 235000)) nil (25803 6552 41104 241000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face font-lock-string-face)) . 6972) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1)) nil (25803 6552 41100 669000) 0 nil])
([nil nil ((6976 . 6977) (t 25803 6552 41885 794000)) nil (25803 6561 256711 851000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . 6976) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1)) nil (25803 6561 256710 685000) 0 nil])
([nil nil ((#("(insert " 0 1 (fontified t face (rainbow-delimiters-depth-2-face)) 1 8 (fontified t)) . 6963) (undo-tree-id289 . -7) (undo-tree-id290 . -7) (undo-tree-id291 . -7) (undo-tree-id292 . -7) (undo-tree-id293 . -8) (undo-tree-id294 . -7) (undo-tree-id295 . -7) (undo-tree-id296 . -8) (undo-tree-id297 . -8) (undo-tree-id298 . -8) 6970) nil (25803 6561 256703 144000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . 6966) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1)) nil (25803 6561 256677 827000) 0 nil])
([nil nil ((6963 . 6965) (#("\"a\"" 0 1 (fontified t face font-lock-string-face) 1 3 (fontified t face font-lock-string-face)) . 6963) (undo-tree-id309 . -2) (undo-tree-id310 . -2) (undo-tree-id311 . -2) (undo-tree-id312 . 3) (undo-tree-id313 . -3) (undo-tree-id314 . -3) (undo-tree-id315 . -3) (undo-tree-id316 . -3) (undo-tree-id317 . -3) (undo-tree-id318 . -3) (undo-tree-id319 . -3) (undo-tree-id320 . -3) (undo-tree-id321 . -3) (undo-tree-id322 . -3) (undo-tree-id323 . -3) (undo-tree-id324 . -3) (undo-tree-id325 . -3) (undo-tree-id326 . -3) (undo-tree-id327 . -3) (undo-tree-id328 . -3) (undo-tree-id329 . -3) (undo-tree-id330 . -3) (undo-tree-id331 . -2) (undo-tree-id332 . -2) (undo-tree-id333 . -2) (undo-tree-id334 . -3) (undo-tree-id335 . -3) (undo-tree-id336 . -3) (t 25803 6561 257885 338000)) nil (25803 6569 93841 21000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -6963) (6963 . 6964) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -6963) (6963 . 6964) (6962 . 6964) (#("{" 0 1 (fontified t)) . -6962) (undo-tree-id395 . -1) (undo-tree-id396 . -1) 6963 (6961 . 6963) (#(")" 0 1 (fontified nil)) . -6960) (6960 . 6961) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -6960) (6960 . 6961) (6952 . 6961) (#("a" 0 1 (fontified t)) . -6952) (undo-tree-id397 . -1) 6953 (6952 . 6953) (#("org-agenda 'a" 0 13 (fontified t)) . 6952) (undo-tree-id398 . -12) (undo-tree-id399 . -12) (undo-tree-id400 . -12) (undo-tree-id401 . -11) (undo-tree-id402 . -13) (undo-tree-id403 . -13) (undo-tree-id404 . -12) (undo-tree-id405 . -13) (undo-tree-id406 . -13) (undo-tree-id407 . -13) (t 25803 6569 93884 950000)) nil (25803 6616 945927 248000) 0 nil])
([nil nil ((6963 . 6969)) nil (25803 6616 945918 280000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -6961) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) 6962 (#("(
	    " 0 1 (fontified t face (rainbow-delimiters-depth-2-face)) 1 7 (fontified t)) . 6962) (undo-tree-id374 . -6) (undo-tree-id375 . -6) (undo-tree-id376 . -6) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . 6) (undo-tree-id384 . -6) (undo-tree-id385 . -6) (undo-tree-id386 . -6) (undo-tree-id387 . -6) (undo-tree-id388 . -7) (undo-tree-id389 . -6) (undo-tree-id390 . -6) (undo-tree-id391 . -6) (undo-tree-id392 . -7) (undo-tree-id393 . -7) (undo-tree-id394 . -7)) nil (25803 6616 945915 788000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . 6961) (undo-tree-id347 . 1) (undo-tree-id348 . 1) (undo-tree-id349 . 1) (undo-tree-id350 . -1) (undo-tree-id351 . -1)) nil (25803 6616 945865 998000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -6965) (6965 . 6966) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -6965) (6965 . 6966) (6964 . 6966) (6961 . 6964)) nil (25803 6616 945861 662000) 0 nil])
([nil nil ((6965 . 6975)) nil (25803 6616 945860 195000) 0 nil])
([nil nil ((6986 . 6987) (6980 . 6986) (#("swit" 0 4 (fontified t)) . -6980) (undo-tree-id344 . -4) (undo-tree-id345 . 4) 6984 (6981 . 6984) (#("e" 0 1 (fontified t)) . -6981) (undo-tree-id346 . -1) 6982 (6980 . 6982) (6979 . 6981) (6976 . 6979)) nil (25803 6616 946040 0) 0 nil])
([nil nil ((6997 . 6999) (#("\"" 0 1 (fontified nil)) . -6997) (6996 . 6998) (6980 . 6996) (#("Switch-to-" 0 6 (fontified t) 6 10 (fontified t)) . -6980) (undo-tree-id408 . -6) (undo-tree-id409 . -10) 6990 (6987 . 6990)) nil (25803 6688 36560 621000) 0 nil] [nil nil ((#("-))

;; (defconst" 0 1 (fontified t) 1 2 (fontified t face (rainbow-delimiters-depth-2-face)) 2 3 (fontified t face (rainbow-delimiters-depth-1-face)) 3 4 (fontified t) 4 5 (fontified t) 5 8 (fontified t face font-lock-comment-delimiter-face) 8 9 (fontified t face font-lock-comment-face) 9 17 (fontified t face font-lock-comment-face)) . 6986) (undo-tree-id337 . 15) (undo-tree-id338 . -4) (undo-tree-id339 . 16) (undo-tree-id340 . -4) (undo-tree-id341 . -4) (undo-tree-id342 . 15) (undo-tree-id343 . -17)) ((6986 . 7003)) (25803 6616 945852 436000) 0 nil])
([nil nil ((6950 . 6951) 6950) nil (25803 6688 36550 800000) 0 nil])
nil
([nil nil ((6999 . 7016)) nil (25803 6688 36546 296000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -7022) (7022 . 7023) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-2-face))) . -7022) (7022 . 7023) (7021 . 7023) (7018 . 7021) (t 25803 6688 37879 63000)) nil (25803 6696 609250 880000) 0 nil])
([nil nil ((7030 . 7031) (7029 . 7031) (#("\"" 0 1 (fontified nil)) . -7029) (7023 . 7030) (#("n" 0 1 (fontified t)) . -7023) (undo-tree-id410 . -1) 7024 (7022 . 7024)) nil (25803 6696 609246 472000) 0 nil])
([nil nil ((6953 . 6958) (#("lambda ()" 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 8 (fontified t face (rainbow-delimiters-depth-2-face)) 8 9 (fontified t face (rainbow-delimiters-depth-2-face))) . 6953) (undo-tree-id411 . -8) (undo-tree-id412 . -8) (undo-tree-id413 . -8) (undo-tree-id414 . -9) (undo-tree-id415 . -9) (undo-tree-id416 . -8) (undo-tree-id417 . -8) (undo-tree-id418 . -8) (undo-tree-id419 . -9) (undo-tree-id420 . -9) (undo-tree-id421 . -9) (t 25803 6696 609878 639000)) nil (25803 6715 606616 707000) 0 nil])
([nil nil ((7030 . 7031) (t 25803 6715 605877 699000) 7029) nil (25803 6782 210687 55000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7033 . 7034) (#("
" 0 1 (fontified nil)) . -7072) (7031 . 7073)) nil (25803 6782 210685 856000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -7032) (undo-tree-id434 . -1) (#(" " 0 1 (fontified t rear-nonsticky t)) . -7033) (undo-tree-id435 . -1) (#("i" 0 1 (fontified t)) . -7034) (undo-tree-id436 . -1) 7035 (7034 . 7035)) nil (25803 6782 210684 359000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 7031)) nil (25803 6782 210680 771000) 0 nil])
([nil nil ((#("(switch-to-buffer \"*Agenda Commands*\")
" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 18 (fontified t) 18 37 (fontified t face font-lock-string-face) 37 38 (fontified t face (rainbow-delimiters-depth-1-face)) 38 39 (fontified t)) . 7031) (undo-tree-id422 . -37) (undo-tree-id423 . 39) (undo-tree-id424 . -39) (undo-tree-id425 . -38) (undo-tree-id426 . 1) (undo-tree-id427 . -39) (undo-tree-id428 . -39) (undo-tree-id429 . -37) (undo-tree-id430 . -37) (undo-tree-id431 . -37) (undo-tree-id432 . -38) (undo-tree-id433 . -39)) nil (25803 6782 210677 261000) 0 nil])
([nil nil ((7025 . 7027) (#("\"a\"" 0 3 (fontified t face font-lock-string-face)) . 7025) (undo-tree-id437 . -2) (undo-tree-id438 . -2) (undo-tree-id439 . -2) (undo-tree-id440 . -3) (undo-tree-id441 . -2) (undo-tree-id442 . -2) (undo-tree-id443 . -2) (undo-tree-id444 . -3) (undo-tree-id445 . -3) (undo-tree-id446 . -3) (t 25803 6782 213874 402000)) nil (25803 6791 431447 379000) 0 nil])
([nil nil ((#("  (org-agenda)
  (switch-to-buffer \"*Agenda Commands*\")
  (insert 'a))
" 0 2 (fontified t) 2 3 (fontified t face (rainbow-delimiters-depth-2-face)) 3 6 (fontified t) 6 13 (fontified t) 13 14 (fontified t face (rainbow-delimiters-depth-2-face)) 14 15 (fontified t) 15 17 (fontified t) 17 18 (fontified t face (rainbow-delimiters-depth-2-face)) 18 35 (fontified t) 35 54 (fontified t face font-lock-string-face) 54 55 (fontified t face (rainbow-delimiters-depth-2-face)) 55 56 (fontified t) 56 58 (fontified t) 58 59 (fontified t face (rainbow-delimiters-depth-2-face)) 59 68 (fontified t) 68 69 (fontified t face (rainbow-delimiters-depth-2-face)) 69 70 (fontified t face (rainbow-delimiters-depth-1-face)) 70 71 (fontified t)) . 6959) (undo-tree-id514 . -69) (undo-tree-id515 . -69) (undo-tree-id516 . -13) (undo-tree-id517 . -71) (undo-tree-id518 . -70) (undo-tree-id519 . 16) (undo-tree-id520 . -71) (undo-tree-id521 . -71) (undo-tree-id522 . -70) (undo-tree-id523 . -71) (undo-tree-id524 . -71) (undo-tree-id525 . -55) (undo-tree-id526 . -54) (undo-tree-id527 . -13) (undo-tree-id528 . -54) (undo-tree-id529 . -54) (undo-tree-id530 . -54) (undo-tree-id531 . -35) (undo-tree-id532 . -35) (undo-tree-id533 . -35) (undo-tree-id534 . -35) (undo-tree-id535 . -71) (undo-tree-id536 . -13) (undo-tree-id537 . -69) (undo-tree-id538 . -69) (undo-tree-id539 . -69) (undo-tree-id540 . -13) (undo-tree-id541 . -71) 6972 (t 25803 6791 433873 946000)) nil (25803 6916 894157 885000) 0 nil])
([nil nil ((#("(progn
" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t)) . 6952) (undo-tree-id483 . -7) (undo-tree-id484 . -7) (undo-tree-id485 . -7) (undo-tree-id486 . -7) (undo-tree-id487 . -7) (undo-tree-id488 . -6) (undo-tree-id489 . -7) (undo-tree-id490 . -7) (undo-tree-id491 . -1) (undo-tree-id492 . -7) (undo-tree-id493 . -7) (undo-tree-id494 . -7) (undo-tree-id495 . -7) (undo-tree-id496 . -7) (undo-tree-id497 . -7) (undo-tree-id498 . -7) (undo-tree-id499 . -7) (undo-tree-id500 . -6) (undo-tree-id501 . -6) (undo-tree-id502 . -5) (undo-tree-id503 . -5) (undo-tree-id504 . -7) (undo-tree-id505 . -7) (undo-tree-id506 . -7) (undo-tree-id507 . -7) (undo-tree-id508 . -7) (undo-tree-id509 . -7) (undo-tree-id510 . -7) (undo-tree-id511 . -7) (undo-tree-id512 . -7) (undo-tree-id513 . -7)) nil (25803 6916 894139 310000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 6951) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1)) nil (25803 6916 894074 549000) 0 nil])
([nil nil ((6947 . 6948) (6943 . 6947) (#("'" 0 1 (fontified t)) . -6943) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) 6944 (#("a" 0 1 (fontified t)) . 6944) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (t 25803 6916 893867 736000)) nil (25803 6926 924539 700000) 0 nil])
([nil nil ((6948 . 6949) (6947 . 6949) (#("\"" 0 1 (fontified nil)) . -6947) (6947 . 6948) (#("a" 0 1 (fontified t)) . 6947) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (t 25803 6926 925867 240000)) nil (25803 6931 254626 412000) 0 nil])
([nil nil ((6948 . 6949) (#("p" 0 1 (fontified t face font-lock-string-face)) . 6948) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (t 25803 6931 257867 25000)) nil (25803 6985 886381 872000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -6957) (6957 . 6958) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . -6957) (6957 . 6958) (6956 . 6958) (6955 . 6956) (t 25803 6985 885864 322000) 6955) nil (25803 6996 918891 941000) 0 nil])
([nil nil ((6973 . 6974) (6972 . 6974) (#("\"" 0 1 (fontified nil)) . -6972) (6971 . 6973) (#("l" 0 1 (fontified t)) . -6971) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (#(" " 0 1 (fontified t)) . -6972) (undo-tree-id556 . -1) (undo-tree-id557 . -1) 6973 (6967 . 6973) (#("-" 0 1 (fontified t)) . -6967) (undo-tree-id558 . -1) 6968 (6967 . 6968) (6957 . 6967)) nil (25803 6996 918885 175000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t)) . -6976) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) 6977 (6976 . 6977) (t 25803 6996 921863 775000)) nil (25803 7013 7083 770000) 0 nil])
([nil nil ((#("(org-agenda nil \"a\")
" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 16 (fontified t) 16 19 (fontified t face font-lock-string-face) 19 20 (fontified t face (rainbow-delimiters-depth-1-face)) 20 21 (fontified t)) . 6956) (undo-tree-id559 . -21) (undo-tree-id560 . -21) (undo-tree-id561 . -21) (undo-tree-id562 . -21) (undo-tree-id563 . -21) (undo-tree-id564 . -20) (undo-tree-id565 . 1) (undo-tree-id566 . -21) (undo-tree-id567 . -21) (undo-tree-id568 . -21) (undo-tree-id569 . -20) (undo-tree-id570 . -21) (undo-tree-id571 . -21) (undo-tree-id572 . -21) (undo-tree-id573 . -20) (undo-tree-id574 . -20) (undo-tree-id575 . -20) (undo-tree-id576 . -19) (undo-tree-id577 . -20) (undo-tree-id578 . -20) (undo-tree-id579 . -20) (undo-tree-id580 . -20) (undo-tree-id581 . -20) (undo-tree-id582 . -20) (undo-tree-id583 . -19) (undo-tree-id584 . -19) (undo-tree-id585 . -19) (undo-tree-id586 . -19) (undo-tree-id587 . -19) (undo-tree-id588 . -19) (undo-tree-id589 . -19) (undo-tree-id590 . -21) 6975) nil (25803 7013 7076 37000) 0 nil])
([nil nil ((6930 . 6934) (#(" " 0 1 (fontified nil)) . 6929) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (6930 . 6931) (t 25803 7013 9862 979000)) nil (25803 7022 152443 668000) 0 nil])
([nil nil ((6955 . 6961) (t 25803 7017 849862 740000)) nil (25803 7072 665605 36000) 0 nil] [nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . 6934) (undo-tree-id601 . 1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (t 25803 7017 849862 740000)) ((6934 . 6935)) (25803 7022 152290 563000) 0 nil])
([nil nil ((6961 . 6963)) nil (25803 7072 665604 178000) 0 nil])
nil
([nil nil ((#("()" 0 1 (fontified t face (rainbow-delimiters-depth-4-face)) 1 2 (fontified t face (rainbow-delimiters-depth-4-face))) . 6961) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . 1) (undo-tree-id682 . -1) (undo-tree-id683 . -2) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -2) (undo-tree-id687 . -2) (undo-tree-id688 . -2) 6962) nil (25803 7072 665602 984000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -6955) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . 1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) 6956 (#("				 " 0 5 (fontified t)) . -6956) (undo-tree-id646 . -5) (undo-tree-id647 . -5) (undo-tree-id648 . -5) (undo-tree-id649 . -5) (undo-tree-id650 . -5) (undo-tree-id651 . -5) (undo-tree-id652 . -5) (undo-tree-id653 . -5) (undo-tree-id654 . -5) (undo-tree-id655 . -5) (undo-tree-id656 . -5) (undo-tree-id657 . -4) (undo-tree-id658 . -4) (undo-tree-id659 . -4) (undo-tree-id660 . -4) (undo-tree-id661 . -5) (undo-tree-id662 . -5) (undo-tree-id663 . -5) (undo-tree-id664 . -5) (undo-tree-id665 . -5) (undo-tree-id666 . -5) (undo-tree-id667 . -5) (undo-tree-id668 . -5) (undo-tree-id669 . -5) (undo-tree-id670 . -5) (undo-tree-id671 . -4) (undo-tree-id672 . -4) (undo-tree-id673 . -4) (undo-tree-id674 . -4) (undo-tree-id675 . -5) (undo-tree-id676 . -5) (undo-tree-id677 . -5) 6961) nil (25803 7072 665593 324000) 0 nil])
([nil nil ((6962 . 6980) (#("split-window" 0 12 (fontified t)) . -6962) (undo-tree-id605 . -12) (undo-tree-id606 . 12) (undo-tree-id607 . -12) 6974 (6962 . 6974) (#("split-wind" 0 10 (fontified t)) . -6962) (undo-tree-id608 . -10) 6972 (6962 . 6972) (#("o" 0 1 (fontified t)) . -6962) (undo-tree-id609 . -1) (#("r" 0 1 (fontified nil)) . -6963) (undo-tree-id610 . -1) (#("g" 0 1 (fontified t)) . -6964) (undo-tree-id611 . -1) 6965 (6962 . 6965) (6961 . 6963) (6955 . 6961)) nil (25803 7072 665535 621000) 0 nil])
([nil nil ((6939 . 6941) (#(" " 0 1 (fontified t)) . -6939) (undo-tree-id721 . -1) (undo-tree-id722 . -1) 6940 (6935 . 6940) (t 25803 7072 665860 27000)) nil (25803 7111 945369 871000) 0 nil])
([nil nil ((6941 . 6947) (#(" " 0 1 (fontified nil)) . 6940) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (6941 . 6942)) nil (25803 7111 945367 407000) 0 nil])
([nil nil ((#("				 " 0 5 (fontified nil)) . -6976) (undo-tree-id712 . -5) (undo-tree-id713 . -5) (undo-tree-id714 . -5) (undo-tree-id715 . -5) (undo-tree-id716 . -5) (6968 . 6976) 6973) nil (25803 7111 945363 837000) 0 nil])
([nil nil ((6967 . 6974) (#("
" 0 1 (fontified t)) . -6967) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) 6968 (#("				    " 0 8 (fontified t)) . -6968) (undo-tree-id702 . -8) (undo-tree-id703 . -8) (undo-tree-id704 . -8) (undo-tree-id705 . -5) (undo-tree-id706 . -5) (undo-tree-id707 . -5) (undo-tree-id708 . -5) (undo-tree-id709 . -8) (undo-tree-id710 . -8) (undo-tree-id711 . -8) 6976) nil (25803 7180 852203 415000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 20) (undo-tree-id893 . -1) (undo-tree-id894 . -1)) nil (25803 7185 462702 885000) 0 nil] [nil nil ((129 . 131) (t 25803 7111 945858 82000)) ((#(";;" 0 2 (face font-lock-comment-delimiter-face)) . 129) (undo-tree-id888 . -1)) (25803 7180 400778 447000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 20) (undo-tree-id891 . -1) (undo-tree-id892 . -1)) nil (25803 7185 462700 183000) 0 nil])
([nil nil ((#("(split-window-right)" 0 1 (fontified t face (rainbow-delimiters-depth-4-face)) 1 19 (fontified t) 19 20 (fontified t face (rainbow-delimiters-depth-4-face))) . 6976) (undo-tree-id788 . -19) (undo-tree-id789 . -19) (undo-tree-id790 . -19) (undo-tree-id791 . -1) (undo-tree-id792 . -19) (t 25803 7130 969857 141000)) ((6976 . 6996)) (25803 7180 261632 468000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 20) (undo-tree-id889 . -1) (undo-tree-id890 . -1)) nil (25803 7185 462695 382000) 0 nil])
([nil nil ((#("				  " 0 6 (fontified t)) . -6943) (undo-tree-id787 . -6) 6949 (6942 . 6949) 6937) ((#("
				  " 0 1 (fontified t) 1 7 (fontified nil)) . 6942) (undo-tree-id844 . -1) (undo-tree-id845 . -7) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (6943 . 6949)) (25803 7180 128410 986000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6943 . 6944) (#("
" 0 1 (fontified nil)) . -6967) (6937 . 6968) 6927 (t 25803 7185 465854 444000)) nil (25803 7195 7412 382000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6962 . 6963) (nil fontified nil 6943 . 6963) (6943 . 6963)) ((#("(split-window-right)" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face)) 1 16 (fontified nil) 16 19 (fontified nil) 19 20 (rear-nonsticky nil fontified nil face (rainbow-delimiters-depth-4-face))) . 6943) (undo-tree-id822 . -19) (undo-tree-id823 . -3) (undo-tree-id824 . -3) (undo-tree-id825 . -3) (undo-tree-id826 . -3) (undo-tree-id827 . -7) (undo-tree-id828 . -7) (undo-tree-id829 . -7) (undo-tree-id830 . -7) (undo-tree-id831 . -11) (undo-tree-id832 . -11) (undo-tree-id833 . -11) (undo-tree-id834 . -11) (undo-tree-id835 . -15) (undo-tree-id836 . -15) (undo-tree-id837 . -15) (undo-tree-id838 . -15) (undo-tree-id839 . -19) (undo-tree-id840 . -19) (undo-tree-id841 . -19) (undo-tree-id842 . -19) (undo-tree-id843 . -19) (nil rear-nonsticky t 6962 . 6963)) (25803 7179 986758 146000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -6963) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -6964) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -6965) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-1-face))) . -6966) (undo-tree-id903 . -1) (undo-tree-id904 . -1) 6967) nil (25803 7195 7409 339000) 0 nil])
([nil nil ((6943 . 6947) 6962) ((#("    " 0 4 (fontified t)) . 6943)) (25803 7179 853401 740000) 0 nil])
([nil nil ((6963 . 6964) (#(")" 0 1 (fontified nil)) . -6963) (6963 . 6964) (#("0" 0 1 (fontified t)) . -6963) (undo-tree-id895 . -1) (undo-tree-id896 . -1) 6964 (6963 . 6964)) nil (25803 7195 7398 472000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -6944) (6943 . 6944) 6962) ((#("	" 0 1 (fontified nil)) . 6943) (6944 . 6948)) (25803 7179 712371 711000) 0 nil])
([nil nil ((#("				  (split-window-right)
" 0 5 (fontified t) 5 6 (fontified t rear-nonsticky t) 6 7 (fontified t face (rainbow-delimiters-depth-4-face)) 7 25 (fontified t) 25 26 (fontified t face (rainbow-delimiters-depth-4-face)) 26 27 (fontified t)) . 6938) (undo-tree-id917 . -26) (undo-tree-id918 . 1) (undo-tree-id919 . -24) (undo-tree-id920 . -24) (undo-tree-id921 . -24) (undo-tree-id922 . -24) (undo-tree-id923 . -24) (undo-tree-id924 . -24) (undo-tree-id925 . -24) (undo-tree-id926 . -24) (undo-tree-id927 . -24) (undo-tree-id928 . -24) (undo-tree-id929 . -24) (undo-tree-id930 . -24) (undo-tree-id931 . -24) (undo-tree-id932 . -27) 6962 (t 25803 7195 9853 971000)) nil (25803 7246 857268 143000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -6948) (6943 . 6948) 6955) ((#("	    " 0 5 (fontified nil)) . 6943) (6948 . 6949)) (25803 7179 572271 4000) 0 nil])
([nil nil ((6972 . 6992) (#("delete-o" 0 8 (fontified t)) . -6972) (undo-tree-id905 . -8) 6980 (6972 . 6980) (#("split-window-right" 0 18 (fontified t)) . 6972) (undo-tree-id906 . -17) (undo-tree-id907 . -17) (undo-tree-id908 . -17) (undo-tree-id909 . -18) (undo-tree-id910 . -18) (undo-tree-id911 . -17) (undo-tree-id912 . -17) (undo-tree-id913 . -17) (undo-tree-id914 . -18) (undo-tree-id915 . -18) (undo-tree-id916 . -18)) nil (25803 7246 857255 97000) 0 nil])
([nil nil ((#("	    " 0 5 (fontified nil)) . -6945) (6943 . 6945) 6955) ((#("		" 0 2 (fontified nil)) . 6943) (6945 . 6950)) (25803 7179 421183 2000) 0 nil])
([nil nil ((#("				  " 0 6 (fontified t)) . -6938) (undo-tree-id941 . -6) 6944 (6937 . 6944) (t 25803 7246 857851 405000) 6936) nil (25803 7292 969018 494000) 0 nil])
([nil nil ((#("		" 0 2 (fontified nil)) . -6949) (6943 . 6949) 6948) ((#("		    " 0 6 (fontified nil)) . 6943) (undo-tree-id816 . -5) (undo-tree-id817 . -5) (undo-tree-id818 . -5) (undo-tree-id819 . -5) (undo-tree-id820 . -5) (undo-tree-id821 . -5) (6949 . 6951)) (25803 7179 233893 503000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 6938) (undo-tree-id940 . 1)) nil (25803 7292 969016 641000) 0 nil])
([nil nil ((#("		    " 0 6 (fontified nil)) . -6946) (undo-tree-id786 . -5) (6943 . 6946) 6948) ((#("			" 0 3 (fontified nil)) . 6943) (undo-tree-id811 . -3) (undo-tree-id812 . -3) (undo-tree-id813 . -3) (undo-tree-id814 . -3) (undo-tree-id815 . -3) (6946 . 6952)) (25803 7178 975272 2000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7002 . 7003) (#("
" 0 1 (fontified nil)) . -7023) (6996 . 7024) 6974) nil (25803 7292 969015 216000) 0 nil])
([nil nil ((#("			" 0 3 (fontified nil)) . -6950) (undo-tree-id785 . -3) (6943 . 6950) 6946) ((#("			    " 0 7 (fontified nil)) . 6943) (undo-tree-id805 . -3) (undo-tree-id806 . -3) (undo-tree-id807 . -3) (undo-tree-id808 . -3) (undo-tree-id809 . -3) (undo-tree-id810 . -3) (6950 . 6953)) (25803 7178 715193 336000) 0 nil])
([nil nil ((#(")))" 0 1 (fontified t face (rainbow-delimiters-depth-3-face)) 1 2 (fontified t face (rainbow-delimiters-depth-2-face)) 2 3 (fontified t face (rainbow-delimiters-depth-1-face))) . 6993) (undo-tree-id936 . -2) (undo-tree-id937 . -2) (undo-tree-id938 . -2) (undo-tree-id939 . -2)) nil (25803 7292 969013 721000) 0 nil])
([nil nil ((#("			    " 0 7 (fontified nil)) . -6947) (undo-tree-id780 . -3) (undo-tree-id782 . -3) (undo-tree-id784 . -3) (6943 . 6947) 6946) ((#("				" 0 4 (fontified nil)) . 6943) (undo-tree-id799 . -3) (undo-tree-id800 . -3) (undo-tree-id801 . -3) (undo-tree-id802 . -3) (undo-tree-id803 . -3) (undo-tree-id804 . -3) (6947 . 6954)) (25803 7178 486969 568000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7022 . 7023) (nil fontified nil 7020 . 7023) (7020 . 7023) 7019) nil (25803 7292 969010 177000) 0 nil])
([nil nil ((#("				" 0 4 (fontified nil)) . -6951) (undo-tree-id771 . -3) (undo-tree-id773 . -4) (undo-tree-id775 . -3) (undo-tree-id777 . -3) (undo-tree-id779 . -3) (6943 . 6951) 6946) ((#("				    " 0 8 (fontified nil)) . 6943) (6951 . 6955)) (25803 7178 309464 720000) 0 nil])
([nil nil ((7017 . 7018) (#("a" 0 1 (fontified t face font-lock-string-face)) . 7017) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1)) nil (25803 7292 969006 301000) 0 nil])
([nil nil ((#("				  " 0 6 (fontified nil)) . -6980) (undo-tree-id766 . -3) (undo-tree-id768 . -3) (undo-tree-id770 . -3) (6972 . 6980) 6975) ((#("				    " 0 8 (fontified nil)) . 6972) (6980 . 6986)) (25803 7178 52927 116000) 0 nil])
([nil nil ((#("				  " 0 6 (fontified t)) . -6994) (undo-tree-id945 . -6) (undo-tree-id946 . -6) (undo-tree-id947 . -6) (undo-tree-id948 . -6) (undo-tree-id949 . -6) (undo-tree-id950 . -6) 7000 (6993 . 7000) (t 25803 7292 969849 123000) 6988) nil (25803 7299 726264 238000) 0 nil])
([nil nil ((#("				  " 0 6 (fontified nil)) . -7009) (undo-tree-id755 . -6) (undo-tree-id756 . -6) (undo-tree-id757 . -6) (undo-tree-id758 . -6) (undo-tree-id759 . -5) (undo-tree-id760 . -3) (undo-tree-id761 . -6) (undo-tree-id763 . -3) (undo-tree-id765 . -3) (7001 . 7009) 7004) ((#("				    " 0 8 (fontified nil)) . 7001) (undo-tree-id793 . -8) (undo-tree-id794 . -8) (undo-tree-id795 . -8) (undo-tree-id796 . -8) (undo-tree-id797 . -8) (undo-tree-id798 . -8) (7009 . 7015)) (25803 7176 940553 703000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 6994) (undo-tree-id942 . 1) (undo-tree-id943 . 1) (undo-tree-id944 . -1)) nil (25803 7299 726256 679000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -7000) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id732 . -1) (undo-tree-id734 . -1) (undo-tree-id736 . -1) (undo-tree-id738 . -1) (undo-tree-id740 . -1) 7001 (#("				    " 0 8 (fontified t)) . -7001) (undo-tree-id741 . -8) (undo-tree-id742 . -8) (undo-tree-id743 . -8) (undo-tree-id744 . -8) (undo-tree-id745 . -8) (undo-tree-id746 . -8) (undo-tree-id747 . -8) (undo-tree-id749 . -8) (undo-tree-id751 . -3) (undo-tree-id753 . -8) 7009) ((7000 . 7009)) (25803 7176 743176 398000) 0 nil])
([nil nil ((#("				  " 0 6 (fontified t)) . -6965) (undo-tree-id967 . -6) (undo-tree-id968 . -6) (undo-tree-id969 . -6) (undo-tree-id970 . -6) (undo-tree-id971 . -6) (undo-tree-id972 . -6) 6971 (6964 . 6971) (t 25803 7299 725848 789000) 6938) nil (25803 7326 406280 722000) 0 nil])
([nil nil ((apply 3 20 52 undo--wrap-and-run-primitive-undo 20 52 ((#(";; " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -20) 54)) (t 25803 7151 13856 149000)) ((apply -3 20 55 undo--wrap-and-run-primitive-undo 20 55 ((20 . 23) 126)) (t 25803 7172 361855 92000)) (25803 7172 358834 546000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 6965) (undo-tree-id965 . 1) (undo-tree-id966 . -1)) nil (25803 7326 406276 94000) 0 nil])
nil
([nil nil ((#("				  " 0 6 (fontified t)) . -6965) (undo-tree-id961 . -6) (undo-tree-id962 . -6) (undo-tree-id963 . -6) (undo-tree-id964 . -6) 6971 (6965 . 6971) (6965 . 6966)) nil (25803 7326 406273 760000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 6965) (undo-tree-id959 . 1) (undo-tree-id960 . -1)) nil (25803 7326 406180 877000) 0 nil])
([nil nil ((7001 . 7019) (#("split-wi" 0 8 (fontified t)) . -7001) (undo-tree-id951 . -8) (undo-tree-id952 . 8) (undo-tree-id953 . -8) 7009 (7001 . 7009) (#("w" 0 1 (fontified t)) . -7001) (undo-tree-id954 . -1) (#("i" 0 1 (fontified t)) . -7002) (undo-tree-id955 . -1) (#("d" 0 1 (fontified t)) . -7003) (undo-tree-id956 . -1) (#("n" 0 1 (fontified t)) . -7004) (undo-tree-id957 . -1) (#("o" 0 1 (fontified t)) . -7005) (undo-tree-id958 . -1) 7006 (7001 . 7006) (7000 . 7002) (6993 . 7000) 6965) nil (25803 7326 406175 180000) 0 nil])
([nil nil ((6961 . 6962) (#("a" 0 1 (fontified t face font-lock-string-face)) . 6961) (t 25803 7326 405847 468000)) nil (25803 7374 506176 903000) 0 nil])
([nil nil ((#("
				  (org-agenda nil \"d\")" 0 1 (fontified t) 1 6 (fontified t) 6 7 (rear-nonsticky t fontified t) 7 8 (fontified t face (rainbow-delimiters-depth-4-face)) 8 18 (fontified t) 18 23 (fontified t) 23 26 (fontified t face font-lock-string-face) 26 27 (fontified t face (rainbow-delimiters-depth-4-face))) . 7020) (undo-tree-id973 . -26) (undo-tree-id974 . -26) (undo-tree-id975 . -26) (undo-tree-id976 . -27) (undo-tree-id977 . -26) (undo-tree-id978 . -27) (undo-tree-id979 . -27) (undo-tree-id980 . -27)) nil (25803 7374 506172 835000) 0 nil])
([nil nil ((7027 . 7029) (7020 . 7027) (t 25803 7374 509845 87000)) nil (25803 7437 964503 954000) 0 nil])
([nil nil ((7028 . 7037) (#("find-fi" 0 7 (fontified t)) . -7028) (undo-tree-id985 . -7) 7035 (7033 . 7035) (7028 . 7033)) nil (25803 7437 964502 217000) 0 nil])
([nil nil ((7055 . 7062) (#("." 0 1 (fontified t face font-lock-string-face)) . -7055) (undo-tree-id981 . -1) (undo-tree-id982 . -1) 7056 (7043 . 7056) (7039 . 7043) (#("]" 0 1 (fontified t face font-lock-string-face)) . -7039) (undo-tree-id983 . -1) (#("~" 0 1 (fontified t face font-lock-string-face)) . -7040) (undo-tree-id984 . -1) 7041 (7039 . 7041) (#("]" 0 1 (fontified nil face font-lock-string-face)) . -7039) (7039 . 7040) (7038 . 7040) (#("\"" 0 1 (fontified nil)) . -7038) (7037 . 7039)) nil (25803 7437 964496 650000) 0 nil])
([nil nil ((5825 . 5827) (5824 . 5825) (5823 . 5824) (t 25803 7437 969841 946000) 5822) nil (25805 38405 270483 139000) 0 nil])
([nil nil ((5837 . 5844) (5826 . 5837) (#("use-pa" 0 6 (fontified t)) . -5826) (undo-tree-id0 . -6) 5832 (5826 . 5832)) nil (25805 38405 270480 300000) 0 nil])
([nil nil ((5851 . 5859) (5850 . 5851) (5847 . 5850) (5844 . 5847)) nil (25805 38405 270464 918000) 0 nil])
([nil nil ((8728 . 8971) (#("
" 0 1 (fontified nil)) . -8728) (8420 . 8729) (#(" " 0 1 (fontified nil)) . 8420) (8147 . 8421) 5859) nil (25805 38406 401861 860000) 0 nil])
([nil nil ((8741 . 8980) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )" 0 237 (fontified nil) 237 238 (fontified nil) 238 239 (fontified nil)) . -8741) (8738 . 8740) (#("
" 0 1 (fontified nil)) . -8738) (8420 . 8739) (#(" " 0 1 (fontified nil)) . 8420) (8147 . 8421) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(cmake-mode yasnippet-snippets which-key use-package-chords undo-tree rainbow-delimiters quickrun projectile org-bullets neotree lsp-ui lsp-java helm-swoop helm-lsp helm-descbinds general flycheck exec-path-from-shell evil-collection doom-themes counsel company centaur-tabs auto-complete all-the-icons)))" 0 245 (fontified nil) 245 248 (fontified nil) 248 277 (fontified nil) 277 581 (fontified nil) 581 582 (fontified nil) 582 583 (fontified nil)) . -8147) 5859) nil (25805 38406 473917 293000) 0 nil])
([nil nil ((5872 . 5874) (5869 . 5872) (5862 . 5869) (5859 . 5862) (t . 0)) nil (25805 38433 867091 920000) 0 nil])
([nil nil ((#("()" 0 2 (fontified t)) . 5872) (undo-tree-id26 . -1) (undo-tree-id27 . 1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) 5873) nil (25805 38433 867090 49000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -5871) (5871 . 5872) (#(")" 0 1 (fontified nil)) . -5871) (5871 . 5872) (5869 . 5872)) nil (25805 38433 867085 706000) 0 nil])
([nil nil ((5870 . 5872) (#(" " 0 1 (fontified nil)) . 5869) (undo-tree-id25 . -1) (5870 . 5871)) nil (25805 38433 867084 286000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -5873) (undo-tree-id24 . -1) 5874 (5873 . 5874)) nil (25805 38433 867082 560000) 0 nil])
([nil nil ((5872 . 5873) (5869 . 5872) 5862) nil (25805 38433 867080 873000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5874 . 5875) (nil fontified nil 5873 . 5875) (5873 . 5875) 5872) nil (25805 38433 867079 370000) 0 nil])
([nil nil ((#("  j()
  ()
" 0 3 (fontified t) 3 4 (fontified t) 4 5 (rear-nonsticky t fontified t) 5 6 (fontified t) 6 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t)) . 5870) (undo-tree-id1 . -9) (undo-tree-id2 . 6) (undo-tree-id3 . -10) (undo-tree-id4 . -3) (undo-tree-id5 . -9) (undo-tree-id6 . -3) (undo-tree-id7 . -8) (undo-tree-id8 . -8) (undo-tree-id9 . -8) (undo-tree-id10 . -8) (undo-tree-id11 . -2) (undo-tree-id12 . -2) (undo-tree-id13 . -2) (undo-tree-id14 . -2) (undo-tree-id15 . -2) (undo-tree-id16 . -2) (undo-tree-id17 . -11) (undo-tree-id18 . -3) (undo-tree-id19 . -9) (undo-tree-id20 . -9) (undo-tree-id21 . -9) (undo-tree-id22 . -3) (undo-tree-id23 . -11) 5873) nil (25805 38438 750200 745000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -5870) (undo-tree-id35 . -2) (undo-tree-id36 . -2) (undo-tree-id37 . -2) (undo-tree-id38 . -2) (undo-tree-id39 . -2) 5872 (5869 . 5872) (t 25805 38433 871750 101000) 5862) nil (25805 38440 103790 376000) 0 nil] [nil nil ((nil rear-nonsticky nil 5905 . 5906) (nil fontified nil 5863 . 5906) (5863 . 5906) 5862 (t 25805 38433 871750 101000)) ((#("(setq org-drill-use-visible-cloze-face-p t)" 0 1 (fontified nil) 1 5 (face font-lock-keyword-face fontified nil) 5 42 (fontified nil) 42 43 (rear-nonsticky nil fontified nil)) . 5863) (undo-tree-id32 . -42) (undo-tree-id33 . -42) (undo-tree-id34 . -42) (nil rear-nonsticky t 5905 . 5906)) (25805 38438 749929 522000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5912 . 5913) (nil fontified nil 5870 . 5913) (5870 . 5913)) nil (25805 38440 103775 490000) 0 nil])
nil
([nil nil ((5870 . 5874) 5912 (t 25805 38440 103750 223000)) nil (25805 38442 862907 152000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -5871) (5870 . 5871) 5912) nil (25805 38442 862905 505000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -5874) (5870 . 5874) 5905) nil (25805 38442 862900 863000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -5918) (undo-tree-id40 . -4) (undo-tree-id41 . -4) (undo-tree-id42 . -4) (undo-tree-id43 . -4) (undo-tree-id44 . -4) 5922 (5917 . 5922) (t 25805 38442 863750 277000) 5912) nil (25805 38500 975046 17000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5956 . 5957) (nil fontified nil 5918 . 5957) (5918 . 5957)) nil (25805 38500 975036 511000) 0 nil])
([nil nil ((5918 . 5922) 5956) nil (25805 38500 975032 156000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -5962) (undo-tree-id45 . -4) (undo-tree-id46 . -4) (undo-tree-id47 . -4) (undo-tree-id48 . -4) (undo-tree-id49 . -4) 5966 (5961 . 5966) (t 25805 38500 979751 420000) 5956) nil (25805 38602 247552 462000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6637 . 6638) (nil fontified nil 5962 . 6638) (5962 . 6638)) nil (25805 38602 247540 843000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -6553) (6552 . 6553) (#("        " 0 8 (fontified nil)) . -6519) (6514 . 6519) (#("         " 0 9 (fontified nil)) . -6493) (6488 . 6493) (#("         " 0 9 (fontified nil)) . -6473) (6468 . 6473) (#("                  " 0 15 (fontified nil) 15 18 (fontified nil)) . -6396) (6390 . 6396) (#("                  " 0 18 (fontified nil)) . -6353) (6347 . 6353) (#("         " 0 9 (fontified nil)) . -6303) (6298 . 6303) (#("         " 0 9 (fontified nil)) . -6259) (6254 . 6259) (#("         " 0 9 (fontified nil)) . -6248) (6243 . 6248) (#("         " 0 9 (fontified nil)) . -6221) (6216 . 6221) (#("        " 0 8 (fontified nil)) . -6211) (6206 . 6211) (#("         " 0 9 (fontified nil)) . -6184) (6179 . 6184) (#("         " 0 9 (fontified nil)) . -6164) (6159 . 6164) (#("         " 0 9 (fontified nil)) . -6097) (6092 . 6097) (#("         " 0 9 (fontified nil)) . -6045) (6040 . 6045) (#("         " 0 9 (fontified nil)) . -6034) (6029 . 6034) (#("         " 0 9 (fontified nil)) . -6007) (6002 . 6007) (#("       " 0 7 (fontified nil)) . -5995) (5994 . 5995) (5962 . 5966) 5967) nil (25805 38602 247534 782000) 0 nil])
([nil nil ((6289 . 6295) (#("o" 0 1 (face font-lock-string-face fontified t)) . -6289) (undo-tree-id0 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -6290) (undo-tree-id1 . -1) (#("g" 0 1 (face font-lock-string-face fontified t)) . -6291) (undo-tree-id2 . -1) 6292 (6280 . 6292) (#("c" 0 1 (face font-lock-string-face fontified t)) . -6280) (undo-tree-id3 . -1) 6281 (6278 . 6281) (#("e" 0 1 (face font-lock-string-face fontified t)) . -6278) (undo-tree-id4 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -6279) (undo-tree-id5 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -6280) (undo-tree-id6 . -1) 6281 (6275 . 6281) (#("my-facts" 0 8 (face font-lock-string-face fontified t)) . 6275) (undo-tree-id7 . -7) (undo-tree-id8 . -7) (undo-tree-id9 . -7) (undo-tree-id10 . -8) (undo-tree-id11 . -7) (undo-tree-id12 . -7) (undo-tree-id13 . -8) (undo-tree-id14 . -8) (undo-tree-id15 . -8) (undo-tree-id16 . -7) 6282 (t 25805 38602 247753 410000)) nil (25805 38821 795357 61000) 0 nil])
([nil nil ((7831 . 7846) (#("s" 0 1 (fontified t)) . -7831) (undo-tree-id0 . -1) 7832 (7820 . 7832) (7819 . 7821) (7812 . 7819) (t 25805 38821 795757 725000)) nil (25806 42858 614808 555000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t face font-lock-comment-face)) . -19) (undo-tree-id0 . -1) 20 (19 . 20) (t 25806 42858 616304 737000) 1) nil (25807 59236 100884 135000) 0 nil])
([nil nil ((#(";" 0 1 (org-category "init" face font-lock-comment-delimiter-face fontified t)) . 98) (t 25807 59236 101914 716000)) nil (25807 59782 625999 507000) 0 nil])
([nil nil (123) nil (25807 59782 625998 75000) 0 nil])
([nil nil ((98 . 99)) nil (25807 59782 625997 273000) 0 nil])
([nil nil ((#(";" 0 1 (face font-lock-comment-delimiter-face org-category "init" fontified t)) . 69)) nil (25807 59782 625995 918000) 0 nil])
([nil nil (95) nil (25807 59782 625994 660000) 0 nil])
([nil nil ((69 . 70)) nil (25807 59782 625990 179000) 0 nil])
([nil nil ((197 . 198) (#("-1" 0 2 (fontified t org-category "init")) . 197) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (t 25807 59782 629925 458000)) nil (25807 59838 793031 166000) 0 nil])
([nil nil ((197 . 199) (#("t" 0 1 (fontified t org-category "init")) . 197) (undo-tree-id21 . -1)) nil (25807 59838 793027 510000) 0 nil])
([nil nil ((#("-1" 0 2 (fontified t org-category "init")) . 216) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1)) nil (25807 59838 793025 720000) 0 nil])
([nil nil ((216 . 217)) nil (25807 59838 793022 75000) 0 nil])
([nil nil ((216 . 218) (#("t" 0 1 (fontified t org-category "init")) . 216) (undo-tree-id16 . -1)) nil (25807 59838 793020 554000) 0 nil])
([nil nil ((7853 . 7854) (#(";; (defconst fancy-splash-text \"Some text goes here\")
;; (defconst fancy-splash-image \"<full image path goes here>\")
;; ;; If concise is non-nil, that would mean to display a concise version of the splash screen in another window.
;; ;; But instead I disable the screen if concise is non-nil.
;; (defun fancy-startup-screen (&optional concise)
;;   (if (not concise)
;; 	  (let ((splash-buffer (get-buffer-create \"STiwRTUP\")))
;; 		(with-current-buffer splash-buffer
;; 		  (let ((inhibit-read-only t))
;; 			(erase-buffer)
;; 			(setq default-directory command-line-default-directory)
;; 			(make-local-variable 'startup-screen-inhibit-startup-screen)
;; 			(fancy-splash-head)
;; 			(setq offsetLen (/ (length fancy-splash-text) 2))
;; 			(insert (propertize \" \" 'display
;; 								`(space :align-to (- center offsetLen))))
;; 			(insert (propertize fancy-splash-text 'face 'bold))
;; 			)
;; 		  (setq buffer-read-only t))
;; 		(switch-to-buffer splash-buffer))))

;; (setq inhibit-startup-echo-area-message
;;       \"your-login-name\")
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(org-drill cmake-mode yasnippet-snippets which-key use-package-chords undo-tree rainbow-delimiters quickrun projectile org-bullets neotree lsp-ui lsp-java helm-swoop helm-lsp helm-descbinds general flycheck exec-path-from-shell evil-collection doom-themes counsel company centaur-tabs auto-complete all-the-icons)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
" 0 3 (face font-lock-comment-delimiter-face fontified t org-category "init") 3 54 (face font-lock-comment-face fontified t org-category "init") 54 57 (face font-lock-comment-delimiter-face fontified t org-category "init") 57 117 (face font-lock-comment-face fontified t org-category "init") 117 120 (face font-lock-comment-delimiter-face fontified t org-category "init") 120 231 (face font-lock-comment-face fontified t org-category "init") 231 234 (face font-lock-comment-delimiter-face fontified t org-category "init") 234 235 (face font-lock-comment-face fontified t org-category "init") 235 293 (face font-lock-comment-face fontified t org-category "init") 293 296 (face font-lock-comment-delimiter-face fontified t org-category "init") 296 344 (face font-lock-comment-face fontified t org-category "init") 344 349 (face font-lock-comment-delimiter-face fontified t org-category "init") 349 360 (face font-lock-comment-face fontified t org-category "init") 360 367 (fontified t face font-lock-comment-face org-category "init") 367 370 (face font-lock-comment-delimiter-face fontified t org-category "init") 370 427 (face font-lock-comment-face fontified t org-category "init") 427 430 (face font-lock-comment-delimiter-face fontified t org-category "init") 430 467 (face font-lock-comment-face fontified t org-category "init") 467 470 (face font-lock-comment-delimiter-face fontified t org-category "init") 470 503 (face font-lock-comment-face fontified t org-category "init") 503 506 (face font-lock-comment-delimiter-face fontified t org-category "init") 506 524 (face font-lock-comment-face fontified t org-category "init") 524 527 (face font-lock-comment-delimiter-face fontified t org-category "init") 527 586 (face font-lock-comment-face fontified t org-category "init") 586 589 (face font-lock-comment-delimiter-face fontified t org-category "init") 589 653 (face font-lock-comment-face fontified t org-category "init") 653 656 (face font-lock-comment-delimiter-face fontified t org-category "init") 656 679 (face font-lock-comment-face fontified t org-category "init") 679 682 (face font-lock-comment-delimiter-face fontified t org-category "init") 682 735 (face font-lock-comment-face fontified t org-category "init") 735 738 (face font-lock-comment-delimiter-face fontified t org-category "init") 738 774 (face font-lock-comment-face fontified t org-category "init") 774 777 (face font-lock-comment-delimiter-face fontified t org-category "init") 777 793 (face font-lock-comment-face fontified t org-category "init") 793 827 (face font-lock-comment-face fontified t org-category "init") 827 830 (face font-lock-comment-delimiter-face fontified t org-category "init") 830 867 (face font-lock-comment-face fontified t org-category "init") 867 885 (fontified t face font-lock-comment-face org-category "init") 885 888 (face font-lock-comment-delimiter-face fontified t org-category "init") 888 893 (face font-lock-comment-face fontified t org-category "init") 893 896 (face font-lock-comment-delimiter-face fontified t org-category "init") 896 927 (face font-lock-comment-face fontified t org-category "init") 927 930 (face font-lock-comment-delimiter-face fontified t org-category "init") 930 968 (face font-lock-comment-face fontified t org-category "init") 968 969 (fontified t org-category "init") 969 972 (face font-lock-comment-delimiter-face fontified t org-category "init") 972 1012 (face font-lock-comment-face fontified t org-category "init") 1012 1021 (face font-lock-comment-delimiter-face fontified t org-category "init") 1021 1040 (face font-lock-comment-face fontified t org-category "init") 1040 1063 (fontified t org-category "init") 1063 1066 (face font-lock-comment-delimiter-face fontified t org-category "init") 1066 1108 (face font-lock-comment-face fontified t org-category "init") 1108 1109 (fontified t org-category "init") 1109 1112 (face font-lock-comment-delimiter-face fontified t org-category "init") 1112 1173 (face font-lock-comment-face fontified t org-category "init") 1173 1174 (fontified t org-category "init") 1174 1177 (face font-lock-comment-delimiter-face fontified t org-category "init") 1177 1231 (face font-lock-comment-face fontified t org-category "init") 1231 1232 (fontified t org-category "init") 1232 1235 (face font-lock-comment-delimiter-face fontified t org-category "init") 1235 1285 (face font-lock-comment-face fontified t org-category "init") 1285 1468 (fontified t org-category "init") 1468 1634 (fontified t org-category "init") 1634 1653 (fontified t org-category "init") 1653 1656 (face font-lock-comment-delimiter-face fontified t org-category "init") 1656 1694 (face font-lock-comment-face fontified t org-category "init") 1694 1695 (fontified t org-category "init") 1695 1698 (face font-lock-comment-delimiter-face fontified t org-category "init") 1698 1759 (face font-lock-comment-face fontified t org-category "init") 1759 1760 (fontified t org-category "init") 1760 1763 (face font-lock-comment-delimiter-face fontified t org-category "init") 1763 1817 (face font-lock-comment-face fontified t org-category "init") 1817 1818 (fontified t org-category "init") 1818 1821 (face font-lock-comment-delimiter-face fontified t org-category "init") 1821 1871 (face font-lock-comment-face fontified t org-category "init") 1871 1874 (fontified t org-category "init")) . 7853) (undo-tree-id0 . -1871) (undo-tree-id1 . -968) (undo-tree-id2 . -1874) (undo-tree-id3 . -968) (undo-tree-id4 . -1873) (undo-tree-id5 . -1871) (undo-tree-id6 . -968) (undo-tree-id7 . -968) (undo-tree-id8 . -1874) (undo-tree-id9 . -1874) (undo-tree-id10 . -1871) (undo-tree-id11 . -1871) (undo-tree-id12 . -968) (undo-tree-id13 . -1874) (undo-tree-id14 . -1874) (undo-tree-id15 . -1874)) nil (25807 59838 793014 911000) 0 nil])
([nil nil ((#("

" 0 1 (fontified t org-category "init") 1 2 (fontified t)) . 7852) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . 1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -2) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -2) (t 25807 59838 793926 562000)) nil (25807 59841 897021 899000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t org-category "init")) . 7851) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1)) nil (25807 59841 897002 796000) 0 nil])
([nil nil ((#("

" 0 2 (fontified t org-category "init")) . 7142) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -2) (t 25807 59841 897926 623000)) nil (25807 59865 156889 94000) 0 nil])
([nil nil ((3906 . 3907) (#("agenda" 0 6 (face font-lock-string-face fontified t org-category "init")) . 3906) (undo-tree-id87 . -5) (undo-tree-id88 . -5) (undo-tree-id89 . -5) (undo-tree-id90 . -6) (undo-tree-id91 . -5) (undo-tree-id92 . -5) (undo-tree-id93 . -5) (undo-tree-id94 . -6) (undo-tree-id95 . -6) (undo-tree-id96 . -6) (t 25807 59865 157927 80000)) nil (25807 61389 949782 563000) 0 nil])
([nil nil ((#("*.org" 0 5 (face font-lock-string-face fontified t org-category "init")) . 3906) (undo-tree-id97 . -4) (undo-tree-id98 . -4) (undo-tree-id99 . 4) (undo-tree-id100 . -4) (undo-tree-id101 . -4) (undo-tree-id102 . -5) (undo-tree-id103 . -4) (undo-tree-id104 . -4) (undo-tree-id105 . -5) (undo-tree-id106 . -5) (undo-tree-id107 . -5) 3910 (t 25807 61389 953957 49000)) nil (25807 61487 486904 882000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-string-face fontified t org-category "init")) . 3905) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (t 25807 61487 489958 966000)) nil (25807 61493 335366 102000) 0 nil])
([nil nil ((8429 . 8672) (#("
" 0 1 (fontified nil)) . -8429) (8111 . 8430) (#(" " 0 1 (fontified nil)) . 8111) (7838 . 8112)) nil (25807 62104 33967 987000) 0 nil])
([nil nil ((8448 . 8687) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )" 0 237 (fontified nil) 237 238 (fontified nil) 238 239 (fontified nil)) . -8448) (8445 . 8447) (#("
" 0 1 (fontified nil)) . -8445) (8111 . 8446) (#(" " 0 1 (fontified nil)) . 8111) (7838 . 8112) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(cmake-mode yasnippet-snippets which-key use-package-chords undo-tree rainbow-delimiters quickrun projectile org-drill org-bullets neotree lsp-ui lsp-java helm-swoop helm-lsp helm-descbinds general flycheck exec-path-from-shell evil-collection doom-themes counsel company centaur-tabs auto-complete all-the-icons)))" 0 245 (fontified nil) 245 248 (fontified nil) 248 277 (fontified nil) 277 591 (fontified nil) 591 592 (fontified nil) 592 593 (fontified nil)) . -7838)) nil (25807 62104 108011 656000) 0 nil])
([nil nil ((4454 . 4473) (#("
" 0 1 (fontified t)) . -4454) (undo-tree-id0 . -1) 4455 (4454 . 4455) (t 25807 62104 109971 86000) 4454) nil (25807 62314 153245 964000) 0 nil])
([nil nil ((nil fontified nil 4493 . 4502) (nil face font-lock-constant-face 4493 . 4502) (#("org-habit" 0 9 (face font-lock-constant-face fontified nil)) . -4487) (4496 . 4511) 4496 (4479 . 4496) (#("a" 0 1 (fontified t)) . -4479) (undo-tree-id1 . -1) 4480 (4478 . 4480) (4475 . 4478) (4474 . 4476) (4473 . 4474) (t 25807 62314 157975 214000) 4472) nil (25807 62325 215263 197000) 0 nil])
([nil nil ((4506 . 4514) (#(" " 0 1 (fontified t)) . -4506) (undo-tree-id2 . -1) 4507 (4505 . 4507) (#("ensure" 0 6 (fontified t)) . -4505) (undo-tree-id3 . -6) 4511 (4505 . 4511) (4502 . 4505) (t 25807 62325 217975 432000)) nil (25807 62332 905011 717000) 0 nil])
([nil nil ((4524 . 4527) (4517 . 4524) (4514 . 4517) (t 25807 62332 909975 583000)) nil (25807 62383 621211 834000) 0 nil])
([nil nil ((4536 . 4549) (#("s" 0 1 (fontified t)) . -4536) (undo-tree-id4 . -1) (#("t" 0 1 (fontified t)) . -4537) (undo-tree-id5 . -1) (#("a" 0 1 (fontified t)) . -4538) (undo-tree-id6 . -1) (#("t" 0 1 (fontified t)) . -4539) (undo-tree-id7 . -1) (#("s" 0 1 (fontified t)) . -4540) (undo-tree-id8 . -1) 4541 (4540 . 4541) (#("u" 0 1 (fontified t)) . -4540) (undo-tree-id9 . -1) (#("s" 0 1 (fontified t)) . -4541) (undo-tree-id10 . -1) 4542 (4541 . 4542) (#("s" 0 1 (fontified t)) . -4541) (undo-tree-id11 . -1) 4542 (4526 . 4542) (4524 . 4527)) nil (25807 62383 621202 947000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -4550) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (#(" " 0 1 (fontified t)) . -4551) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (#(" " 0 1 (fontified t)) . -4552) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) 4553 (t 25807 62383 653976 580000)) nil (25807 62386 153543 790000) 0 nil])
([nil nil ((4550 . 4553) (t 25807 62386 157976 629000)) nil (25807 63062 721111 294000) 0 nil])
([nil nil ((4525 . 4527) (#(" " 0 1 (fontified nil)) . 4524) (undo-tree-id14 . -1) (4525 . 4526)) nil (25807 63062 721109 805000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . -4529) (undo-tree-id13 . -1) (4525 . 4529) 4526) nil (25807 63062 721107 229000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -4530) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (4529 . 4530) (#("  " 0 2 (fontified nil)) . -4521) (4517 . 4521) (#("  " 0 2 (fontified nil)) . -4507) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (4503 . 4507) 4504) nil (25807 63062 721102 62000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . -4560) (undo-tree-id40 . 2) (undo-tree-id41 . -1) (4556 . 4560) 4557 (t 25807 63062 725989 927000)) nil (25807 63119 678959 682000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -4577) (undo-tree-id27 . -1) (#("m" 0 1 (fontified t)) . -4578) (undo-tree-id28 . -1) (#("g" 0 1 (fontified t)) . -4579) (undo-tree-id29 . -1) (#("e" 0 1 (fontified t)) . -4580) (undo-tree-id30 . -1) 4581 (4576 . 4581) (#("e" 0 1 (fontified t)) . -4576) (undo-tree-id31 . -1) 4577 (#("n" 0 1 (fontified t)) . -4577) (undo-tree-id32 . -1) 4578 (4574 . 4578) (#("c" 0 1 (fontified t)) . -4574) (undo-tree-id33 . -1) (#("h" 0 1 (fontified t)) . -4575) (undo-tree-id34 . -1) 4576 (#("a" 0 1 (fontified t)) . -4576) (undo-tree-id35 . -1) (#("n" 0 1 (fontified t)) . -4577) (undo-tree-id36 . -1) (#("g" 0 1 (fontified t)) . -4578) (undo-tree-id37 . -1) 4579 (4566 . 4579) (4564 . 4566) (4563 . 4565) (4559 . 4563) (#("	" 0 1 (fontified nil)) . -4533) (4533 . 4534) (#("	" 0 1 (fontified nil)) . 4533) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (4529 . 4533) (4555 . 4556)) nil (25807 63119 678954 393000) 0 nil])
([nil nil ((4586 . 4589) (4564 . 4586) (#("org-habit-gra" 0 13 (fontified t)) . -4564) (undo-tree-id15 . -10) (undo-tree-id16 . -13) (undo-tree-id17 . 13) (undo-tree-id18 . -13) 4577 (4574 . 4577) (#("c" 0 1 (fontified t)) . -4574) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (#("h" 0 1 (fontified t)) . -4575) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (#("a" 0 1 (fontified t)) . -4576) (undo-tree-id23 . -1) (#("n" 0 1 (fontified t)) . -4577) (undo-tree-id24 . -1) (#("g" 0 1 (fontified t)) . -4578) (undo-tree-id25 . -1) (#("e" 0 1 (fontified t)) . -4579) (undo-tree-id26 . -1) 4580 (4577 . 4580)) nil (25807 63119 678939 1000) 0 nil])
([nil nil ((#("q" 0 1 (fontified t)) . -4590) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) 4591 (4590 . 4591) (t 25807 63119 681991 46000)) nil (25807 63134 43402 385000) 0 nil])
([nil nil (4589) nil (25807 63134 43397 923000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t face font-lock-builtin-face)) . -4569) (undo-tree-id42 . -1) (undo-tree-id43 . -1) 4570 (4566 . 4570) (#("t" 0 1 (fontified t)) . -4566) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (#("q" 0 1 (fontified t)) . -4567) (undo-tree-id46 . -1) 4568 (4564 . 4568)) nil (25807 63134 43393 902000) 0 nil])
([nil nil ((4592 . 4593) (#("2" 0 1 (fontified t)) . 4592) (t 25807 63134 45991 329000)) nil (25807 63167 307833 178000) 0 nil])
([nil nil ((2042 . 2055) (#("o" 0 1 (fontified t)) . -2042) (undo-tree-id52 . -1) (#("r" 0 1 (fontified t)) . -2043) (undo-tree-id53 . -1) (#("g" 0 1 (fontified t)) . -2044) (undo-tree-id54 . -1) 2045 (2033 . 2045) (#("-" 0 1 (fontified t)) . -2033) (undo-tree-id55 . -1) (#("0" 0 1 (fontified t)) . -2034) (undo-tree-id56 . -1) 2035 (2030 . 2035) (2029 . 2031) (2028 . 2029) (2027 . 2028) (t 25807 63167 309991 983000) 2010) nil (25807 63423 83247 472000) 0 nil])
([nil nil ((2034 . 2041) (#("pacakge" 0 7 (fontified t)) . 2034) (undo-tree-id87 . -6) (undo-tree-id88 . -5) (undo-tree-id89 . -5) (undo-tree-id90 . -5) (undo-tree-id91 . -5) (undo-tree-id92 . -7) (undo-tree-id93 . -7) 2039 (t 25807 63423 89997 10000)) nil (25807 63447 235989 774000) 0 nil])
([nil nil ((2046 . 2047) (#("d" 0 1 (fontified t face font-lock-comment-face)) . -2046) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (#("i" 0 1 (fontified t face font-lock-comment-face)) . -2047) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (#("n" 0 1 (fontified t face font-lock-comment-face)) . -2048) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (#("g" 0 1 (fontified t face font-lock-comment-face)) . -2049) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (#("s" 0 1 (fontified t face font-lock-comment-face)) . -2050) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -2051) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (#("o" 0 1 (fontified t face font-lock-comment-face)) . -2052) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (#("n" 0 1 (fontified t face font-lock-comment-face)) . -2053) (undo-tree-id71 . -1) (undo-tree-id72 . -1) 2054 (2045 . 2054) (#("n" 0 1 (fontified t face font-lock-comment-face)) . -2045) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (#("d" 0 1 (fontified t face font-lock-comment-face)) . -2046) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (#("g" 0 1 (fontified t face font-lock-comment-face)) . -2047) (undo-tree-id77 . -1) (undo-tree-id78 . -1) 2048 (2038 . 2048) (#("u" 0 1 (fontified t face font-lock-comment-face)) . -2038) (undo-tree-id79 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -2039) (undo-tree-id80 . -1) 2040 (2039 . 2040) (#("m" 0 1 (fontified t face font-lock-comment-face)) . -2039) (undo-tree-id81 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -2040) (undo-tree-id82 . -1) 2041 (2036 . 2041) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -2036) (undo-tree-id83 . -1) (#("v" 0 1 (fontified t face font-lock-comment-face)) . -2037) (undo-tree-id84 . -1) (#("i" 0 1 (fontified t face font-lock-comment-face)) . -2038) (undo-tree-id85 . -1) (#("l" 0 1 (fontified t face font-lock-comment-face)) . -2039) (undo-tree-id86 . -1) 2040 (2029 . 2040) (2028 . 2029) 2028) nil (25807 63447 235978 327000) 0 nil])
([nil nil ((2046 . 2048) (#("g" 0 1 (fontified t face font-lock-comment-face)) . 2046) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (t 25807 63447 241997 484000)) nil (25807 63449 785251 245000) 0 nil])
([nil nil ((2066 . 2077) (2063 . 2066) (#("o" 0 1 (fontified t face font-lock-comment-face)) . -2063) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (#("i" 0 1 (fontified t face font-lock-comment-face)) . -2064) (undo-tree-id99 . -1) (undo-tree-id100 . -1) 2065 (2048 . 2065) (t 25807 63449 789997 535000)) nil (25807 63459 990409 930000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-comment-face)) . -2077) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (#("a" 0 1 (fontified t face font-lock-comment-face)) . -2078) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (#("n" 0 1 (fontified t face font-lock-comment-face)) . -2079) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (#("d" 0 1 (fontified t face font-lock-comment-face)) . -2080) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -2081) (undo-tree-id112 . -1) (undo-tree-id113 . -1) 2082 (2077 . 2082) (t 25807 63459 993997 735000)) nil (25807 63463 411088 486000) 0 nil])
([nil nil ((2112 . 2116) (#("e" 0 1 (fontified t face font-lock-builtin-face)) . -2112) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (#("r" 0 1 (fontified t face font-lock-builtin-face)) . -2113) (undo-tree-id116 . -1) (undo-tree-id117 . -1) 2114 (2107 . 2114) (2104 . 2107) (t 25807 63463 413997 802000)) nil (25807 63468 800484 141000) 0 nil])
([nil nil ((8685 . 8924) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )" 0 239 (fontified nil)) . -8685) (8682 . 8684) (#("
" 0 1 (fontified nil)) . -8682) (8348 . 8683) (#(" " 0 1 (fontified nil)) . 8348) (8075 . 8349) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(org-habit-stats cmake-mode yasnippet-snippets which-key use-package-chords undo-tree rainbow-delimiters quickrun projectile org-drill org-bullets neotree lsp-ui lsp-java helm-swoop helm-lsp helm-descbinds general flycheck exec-path-from-shell evil-collection doom-themes counsel company centaur-tabs auto-complete all-the-icons)))" 0 609 (fontified nil)) . -8075) (t 25807 63468 805997 908000)) nil (25807 63503 118312 221000) 0 nil])
([nil nil ((8685 . 8924) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )" 0 239 (fontified nil)) . -8685) (8682 . 8684) (#("
" 0 1 (fontified nil)) . -8682) (8348 . 8683) (#(" " 0 1 (fontified nil)) . 8348) (8075 . 8349) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(org-habit-stats cmake-mode yasnippet-snippets which-key use-package-chords undo-tree rainbow-delimiters quickrun projectile org-drill org-bullets neotree lsp-ui lsp-java helm-swoop helm-lsp helm-descbinds general flycheck exec-path-from-shell evil-collection doom-themes counsel company centaur-tabs auto-complete all-the-icons)))" 0 609 (fontified nil)) . -8075) (t 25807 63503 121998 583000)) nil (25807 63534 837472 417000) 0 nil])
([nil nil ((1639 . 1640) (t 25807 63515 637998 829000) 1625) nil (25807 63549 56304 623000) 0 nil] [nil nil ((1448 . 1449) (t 25807 63515 637998 829000)) ((#("t" 0 1 (fontified t)) . 1448)) (25807 63534 837324 386000) 0 nil])
([nil nil ((1658 . 1663) (#("g" 0 1 (face font-lock-comment-face fontified t)) . -1658) (undo-tree-id0 . -1) (#("s" 0 1 (face font-lock-comment-face fontified t)) . -1659) (undo-tree-id1 . -1) (#(" " 0 1 (face font-lock-comment-face fontified t)) . -1660) (undo-tree-id2 . -1) 1661 (1658 . 1661) (#("d" 0 1 (face font-lock-comment-face fontified t)) . -1658) (undo-tree-id3 . -1) (#("g" 0 1 (face font-lock-comment-face fontified t)) . -1659) (undo-tree-id4 . -1) (#("s" 0 1 (face font-lock-comment-face fontified t)) . -1660) (undo-tree-id5 . -1) 1661 (1648 . 1661) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -1648) (undo-tree-id6 . -1) 1649 (1648 . 1649) (1641 . 1648) (1640 . 1641) 1640) nil (25807 63549 56299 71000) 0 nil])
nil
([nil nil ((1659 . 1660) (#("ings" 0 4 (face font-lock-comment-face fontified t)) . 1659) (undo-tree-id7 . -3) (undo-tree-id8 . -3) (undo-tree-id9 . -3) (undo-tree-id10 . -3) (undo-tree-id11 . -3) (undo-tree-id12 . -3) (undo-tree-id13 . -3) (undo-tree-id14 . -3) (undo-tree-id15 . -3) (undo-tree-id16 . -3) (undo-tree-id17 . -3) (undo-tree-id18 . -3) (undo-tree-id19 . -3) (undo-tree-id20 . -3) (undo-tree-id21 . -4) (undo-tree-id22 . -4) (undo-tree-id23 . -3) (undo-tree-id24 . -3) (undo-tree-id25 . -3) (undo-tree-id26 . -3) (undo-tree-id27 . -3) (undo-tree-id28 . -3) (undo-tree-id29 . -4) (undo-tree-id30 . -3) (undo-tree-id31 . -3) (undo-tree-id32 . -3) (undo-tree-id33 . -4) (undo-tree-id34 . -4) (undo-tree-id35 . -4) (t 25807 63549 57999 486000)) nil (25807 63564 431483 853000) 0 nil])
([nil nil ((1682 . 1684) (#("n" 0 1 (face font-lock-comment-face fontified t)) . -1682) (undo-tree-id36 . -1) (undo-tree-id37 . -1) 1683 (1680 . 1683) (#("n" 0 1 (face font-lock-comment-face fontified t)) . -1680) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (#("g" 0 1 (face font-lock-comment-face fontified t)) . -1681) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -1682) (undo-tree-id42 . -1) (undo-tree-id43 . -1) 1683 (1677 . 1683) (#(" " 0 1 (face font-lock-comment-face fontified t)) . -1677) (undo-tree-id44 . -1) 1678 (1671 . 1678) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -1671) (undo-tree-id45 . -1) (#("l" 0 1 (face font-lock-comment-face fontified t)) . -1672) (undo-tree-id46 . -1) (#("s" 0 1 (face font-lock-comment-face fontified t)) . -1673) (undo-tree-id47 . -1) 1674 (1660 . 1674) (t 25807 63564 433999 788000)) nil (25807 63671 448224 657000) 0 nil])
([nil nil ((1714 . 1723) (1711 . 1714) (1703 . 1711) (1697 . 1703) (1686 . 1697) (#("use-pa" 0 6 (fontified t)) . -1686) (undo-tree-id48 . -6) 1692 (1687 . 1692) (#("e" 0 1 (fontified t)) . -1687) (undo-tree-id49 . -1) (#("s" 0 1 (fontified t)) . -1688) (undo-tree-id50 . -1) 1689 (1686 . 1689) (1685 . 1687) (#("*" 0 1 (fontified t)) . -1685) (undo-tree-id51 . -1) 1686 (#("(" 0 1 (fontified nil)) . -1686) (undo-tree-id52 . -1) (#(")" 0 1 (fontified t)) . 1687) (1685 . 1688) (1684 . 1685) (t 25807 63671 450001 891000) 1683) nil (25807 63693 40679 316000) 0 nil])
([nil nil ((8784 . 9023) ("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )" . -8784) (8781 . 8783) (#("
" 0 1 (fontified nil)) . -8781) (8433 . 8782) (#(" " 0 1 (fontified nil)) . 8433) (8160 . 8434) ("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(org-habit-stats cmake-mode yasnippet-snippets which-key use-package-chords undo-tree rainbow-delimiters quickrun projectile org-drill org-bullets neotree lsp-ui lsp-java helm-swoop helm-lsp helm-descbinds general flycheck exec-path-from-shell evil-collection doom-themes counsel company centaur-tabs auto-complete all-the-icons)))" . -8160) 1724) nil (25807 63700 847553 856000) 0 nil] [nil nil ((1714 . 1715) (1712 . 1714) (1712 . 1713) (#("  :ensure t)
" 0 2 (fontified t) 2 9 (face font-lock-builtin-face fontified t) 9 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t)) . 1712) (undo-tree-id53 . -12) (undo-tree-id54 . 2) (undo-tree-id55 . 1) (undo-tree-id56 . -10) (undo-tree-id57 . -10) (undo-tree-id58 . -10) (undo-tree-id59 . -10) (undo-tree-id60 . -10) (undo-tree-id61 . -10) (undo-tree-id62 . -10) (undo-tree-id63 . -10) (undo-tree-id64 . -10) (undo-tree-id65 . -13) (undo-tree-id66 . -13) (undo-tree-id67 . -13) 1722 (t 25807 63691 494002 285000)) ((1712 . 1725) (#("
" 0 1 (fontified nil)) . 1712) (undo-tree-id68 . 1) (#("  " 0 2 (fontified nil)) . 1712) (undo-tree-id69 . -2) (undo-tree-id70 . -2) (#("A" 0 1 (fontified t)) . 1714)) (25807 63693 40480 944000) 0 nil])
([nil nil ((#("-" 0 1 (face font-lock-constant-face fontified t)) . -1706) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (#("m" 0 1 (face font-lock-constant-face fontified t)) . -1707) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (#("o" 0 1 (face font-lock-constant-face fontified t)) . -1708) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (#("d" 0 1 (face font-lock-constant-face fontified t)) . -1709) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -1710) (undo-tree-id131 . 1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) 1711 (t . 0)) nil (25807 63736 464254 570000) 0 nil])
nil
([nil nil ((8788 . 9027) ("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )" . -8788) (8785 . 8787) (#("
" 0 1 (fontified nil)) . -8785) (8428 . 8786) (#(" " 0 1 (fontified nil)) . 8428) (8155 . 8429) ("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(evil-org-mode org-habit-stats cmake-mode yasnippet-snippets which-key use-package-chords undo-tree rainbow-delimiters quickrun projectile org-drill org-bullets neotree lsp-ui lsp-java helm-swoop helm-lsp helm-descbinds general flycheck exec-path-from-shell evil-collection doom-themes counsel company centaur-tabs auto-complete all-the-icons)))" . -8155) 1718) nil (25807 63737 643351 183000) 0 nil])
([nil nil ((1734 . 1743) (#("-" 0 1 (fontified t)) . -1734) (undo-tree-id136 . -1) 1735 (1733 . 1735) (1730 . 1733) (1729 . 1731) (#("ensur" 0 5 (fontified t)) . -1729) (undo-tree-id137 . -5) 1734 (1729 . 1734) (#("n" 0 1 (fontified t)) . -1729) (undo-tree-id138 . -1) 1730 (1729 . 1730) (#("e" 0 1 (fontified t)) . -1729) (undo-tree-id139 . -1) (#("u" 0 1 (fontified t)) . -1730) (undo-tree-id140 . -1) 1731 (1728 . 1731) (#(" " 0 1 (fontified t)) . -1728) (undo-tree-id141 . -1) (#("e" 0 1 (fontified t)) . -1729) (undo-tree-id142 . -1) (#("s" 0 1 (fontified t)) . -1730) (undo-tree-id143 . -1) 1731 (1722 . 1731) (#(":" 0 1 (face font-lock-builtin-face fontified t)) . -1722) (undo-tree-id144 . -1) 1723 (1721 . 1723) (#(":" 0 1 (fontified t)) . -1721) (undo-tree-id145 . -1) (#("e" 0 1 (face font-lock-builtin-face fontified t)) . -1722) (undo-tree-id146 . -1) (#("n" 0 1 (face font-lock-builtin-face fontified t)) . -1723) (undo-tree-id147 . -1) 1724 (#("s" 0 1 (face font-lock-builtin-face fontified t)) . -1724) (undo-tree-id148 . -1) 1725 (1721 . 1725) (1718 . 1721) (t . 0)) nil (25807 63779 988885 438000) 0 nil])
([nil nil ((8814 . 9053) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )" 0 239 (fontified nil)) . -8814) (8811 . 8813) (#("
" 0 1 (fontified nil)) . -8811) (8454 . 8812) (#(" " 0 1 (fontified nil)) . 8454) (8181 . 8455) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(evil-org evil-org-mode org-habit-stats cmake-mode yasnippet-snippets which-key use-package-chords undo-tree rainbow-delimiters quickrun projectile org-drill org-bullets neotree lsp-ui lsp-java helm-swoop helm-lsp helm-descbinds general flycheck exec-path-from-shell evil-collection doom-themes counsel company centaur-tabs auto-complete all-the-icons)))" 0 632 (fontified nil)) . -8181) (t 25807 63779 994004 25000)) nil (25807 63793 283540 90000) 0 nil])
([nil nil ((#("  :config (evil-org-mode))
" 0 2 (fontified t) 2 9 (fontified t face font-lock-builtin-face) 9 27 (fontified t)) . 1719) (undo-tree-id0 . -26) (t 25807 63793 286004 286000)) nil (25807 63902 144966 315000) 0 nil])
([nil nil ((1718 . 1719) (#(")" 0 1 (fontified nil)) . -1718) (1718 . 1719)) nil (25807 63902 144952 516000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1719 . 1720) (#("
" 0 1 (fontified nil)) . -1754) (1719 . 1755) 1718) nil (25807 63902 144950 511000) 0 nil])
([nil nil ((1741 . 1748)) nil (25807 63902 144945 933000) 0 nil])
([nil current ((8846 . 9085) (#("(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )" 0 239 (fontified nil)) . -8846) (8843 . 8845) (#("
" 0 1 (fontified nil)) . -8843) (8470 . 8844) (#(" " 0 1 (fontified nil)) . 8470) (8197 . 8471) (#("(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(evil-org evil-org-mode org-habit-stats cmake-mode yasnippet-snippets which-key use-package-chords undo-tree rainbow-delimiters quickrun projectile org-drill org-bullets neotree lsp-ui lsp-java helm-swoop helm-lsp helm-descbinds general flycheck exec-path-from-shell evil-collection doom-themes counsel company centaur-tabs auto-complete all-the-icons)))" 0 632 (fontified nil)) . -8197) 1760) nil (25807 63912 578504 600000) 0 nil])
nil
